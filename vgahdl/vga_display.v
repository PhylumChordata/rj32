/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_Sub #(
    parameter Bits = 2
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits-1):0] s,
    output c_o
);
    wire [Bits:0] temp;

    assign temp = a - b - c_i;
    assign s = temp[(Bits-1):0];
    assign c_o = temp[Bits];
endmodule


module DIG_CounterPreset #(
    parameter Bits = 2,
    parameter maxValue = 4
)
(
    input C,
    input en,
    input clr,
    input dir,
    input [(Bits-1):0] in,
    input ld,
    output [(Bits-1):0] out,
    output ovf
);

    reg [(Bits-1):0] count = 'h0;

    function [(Bits-1):0] maxVal (input [(Bits-1):0] maxv);
        if (maxv == 0)
            maxVal = (1 << Bits) - 1;
        else
            maxVal = maxv;
    endfunction

    assign out = count;
    assign ovf = ((count == maxVal(maxValue) & dir == 1'b0)
                  | (count == 'b0 & dir == 1'b1))? en : 1'b0;

    always @ (posedge C) begin
        if (clr == 1'b1)
            count <= 'h0;
        else if (ld == 1'b1)
            count <= in;
        else if (en == 1'b1) begin
            if (dir == 1'b0) begin
                if (count == maxVal(maxValue))
                    count <= 'h0;
                else
                    count <= count + 1'b1;
            end
            else begin
                if (count == 'h0)
                    count <= maxVal(maxValue);
                else
                    count <= count - 1;
            end
        end
    end
endmodule


module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule

module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module vga_timing (
  input en,
  input clock,
  input [11:0] res,
  input [11:0] fp,
  input [11:0] sync,
  input [11:0] bp,
  input neg,
  output [11:0] V,
  output pulse,
  output next
);
  wire [11:0] s0;
  wire next_temp;
  wire [11:0] V_temp;
  wire [11:0] s1;
  wire [11:0] s2;
  wire [11:0] s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  DIG_Sub #(
    .Bits(12)
  )
  DIG_Sub_i0 (
    .a( res ),
    .b( 12'b1 ),
    .c_i( 1'b0 ),
    .s( s1 )
  );
  DIG_Sub #(
    .Bits(12)
  )
  DIG_Sub_i1 (
    .a( 12'b0 ),
    .b( bp ),
    .c_i( 1'b0 ),
    .s( s2 )
  );
  DIG_Sub #(
    .Bits(12)
  )
  DIG_Sub_i2 (
    .a( s2 ),
    .b( sync ),
    .c_i( 1'b0 ),
    .s( s3 )
  );
  DIG_Sub #(
    .Bits(12)
  )
  DIG_Sub_i3 (
    .a( s3 ),
    .b( fp ),
    .c_i( 1'b0 ),
    .s( s0 )
  );
  DIG_CounterPreset #(
    .Bits(12),
    .maxValue(0)
  )
  DIG_CounterPreset_i4 (
    .en( en ),
    .C( clock ),
    .dir( 1'b0 ),
    .in( s0 ),
    .ld( next_temp ),
    .clr( 1'b0 ),
    .out( V_temp )
  );
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i5 (
    .a( V_temp ),
    .b( s1 ),
    .\= ( next_temp )
  );
  assign pulse = (s4 ^ neg);
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i6 (
    .a( V_temp ),
    .b( s2 ),
    .\= ( s5 )
  );
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i7 (
    .a( V_temp ),
    .b( s3 ),
    .\= ( s6 )
  );
  assign s7 = (~ s5 & (s6 | s4));
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i8 (
    .D( s7 ),
    .C( clock ),
    .Q( s4 )
  );
  assign V = V_temp;
  assign next = next_temp;
endmodule

module vga_sync (
  input clock,
  input [11:0] res_H,
  input [11:0] fp_H,
  input [11:0] sync_H,
  input [11:0] bp_H,
  input neg_H,
  input [11:0] res_V,
  input [11:0] fp_V,
  input [11:0] sync_V,
  input [11:0] bp_V,
  input neg_V,
  output H,
  output V,
  output pic,
  output [11:0] X,
  output [11:0] Y
);
  wire [11:0] X_temp;
  wire s0;
  wire [11:0] Y_temp;
  wire s1;
  wire s2;
  // Horiz
  vga_timing vga_timing_i0 (
    .en( 1'b1 ),
    .clock( clock ),
    .res( res_H ),
    .fp( bp_H ),
    .sync( sync_H ),
    .bp( fp_H ),
    .neg( neg_H ),
    .V( X_temp ),
    .pulse( H ),
    .next( s0 )
  );
  // Vert
  vga_timing vga_timing_i1 (
    .en( s0 ),
    .clock( clock ),
    .res( res_V ),
    .fp( bp_V ),
    .sync( sync_V ),
    .bp( fp_V ),
    .neg( neg_V ),
    .V( Y_temp ),
    .pulse( V )
  );
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i2 (
    .a( X_temp ),
    .b( 12'b1010000000 ),
    .\< ( s1 )
  );
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i3 (
    .a( Y_temp ),
    .b( 12'b111100000 ),
    .\< ( s2 )
  );
  assign pic = (s1 & s2);
  assign X = X_temp;
  assign Y = Y_temp;
endmodule

module DIG_Counter_Nbit
#(
    parameter Bits = 2
)
(
    output [(Bits-1):0] out,
    output ovf,
    input C,
    input en,
    input clr
);
    reg [(Bits-1):0] count;

    always @ (posedge C) begin
        if (clr)
          count <= 'h0;
        else if (en)
          count <= count + 1'b1;
    end

    assign out = count;
    assign ovf = en? &count : 1'b0;

    initial begin
        count = 'h0;
    end
endmodule

module DIG_BitExtender #(
    parameter inputBits = 2,
    parameter outputBits = 4
)
(
    input [(inputBits-1):0] in,
    output [(outputBits - 1):0] out
);
    assign out = {{(outputBits - inputBits){in[inputBits - 1]}}, in};
endmodule




module vga_charpos (
  input [11:0] X,
  input [11:0] Y,
  output [4:0] row,
  output [3:0] col,
  output [7:0] CX,
  output [7:0] CY
);
  wire [12:0] s0;
  DIG_BitExtender #(
    .inputBits(12),
    .outputBits(13)
  )
  DIG_BitExtender_i0 (
    .in( Y ),
    .out( s0 )
  );
  assign col = X[3:0];
  assign CX = X[11:4];
  assign row = s0[4:0];
  assign CY = s0[12:5];
endmodule

module DIG_Register_BUS #(
    parameter Bits = 1
)
(
    input C,
    input en,
    input [(Bits - 1):0]D,
    output [(Bits - 1):0]Q
);

    reg [(Bits - 1):0] state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module vga_string (
  input [7:0] CX_i,
  input [7:0] CY_i,
  input [6:0] C_i,
  input [11:0] fg_i,
  input [11:0] bg_i,
  input [11:0] fg_c,
  input [11:0] bg_c,
  input [5:0] CX_c,
  input [7:0] CY_c,
  input [6:0] C_0,
  input [6:0] C_1,
  input [6:0] C_2,
  input [6:0] C_3,
  input en,
  input clock,
  output [7:0] CX_o,
  output [7:0] CY_o,
  output [6:0] C_o,
  output [11:0] fg_o,
  output [11:0] bg_o
);
  wire s0;
  wire [6:0] s1;
  wire [5:0] s2;
  wire s3;
  wire s4;
  wire [1:0] s5;
  wire [6:0] s6;
  wire [6:0] s7;
  wire [6:0] s8;
  wire [6:0] s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i0 (
    .a( CY_i ),
    .b( CY_c ),
    .\= ( s4 )
  );
  assign s5 = CX_i[1:0];
  assign s2 = CX_i[7:2];
  CompUnsigned #(
    .Bits(6)
  )
  CompUnsigned_i1 (
    .a( s2 ),
    .b( CX_c ),
    .\= ( s3 )
  );
  assign s10 = ~ s4;
  assign s11 = ~ s4;
  assign s12 = ~ s4;
  assign s13 = ~ s4;
  assign s0 = (s3 & en & s4);
  DIG_Register_BUS #(
    .Bits(7)
  )
  DIG_Register_BUS_i2 (
    .D( C_0 ),
    .C( clock ),
    .en( s10 ),
    .Q( s6 )
  );
  DIG_Register_BUS #(
    .Bits(7)
  )
  DIG_Register_BUS_i3 (
    .D( C_1 ),
    .C( clock ),
    .en( s11 ),
    .Q( s7 )
  );
  DIG_Register_BUS #(
    .Bits(7)
  )
  DIG_Register_BUS_i4 (
    .D( C_2 ),
    .C( clock ),
    .en( s12 ),
    .Q( s8 )
  );
  DIG_Register_BUS #(
    .Bits(7)
  )
  DIG_Register_BUS_i5 (
    .D( C_3 ),
    .C( clock ),
    .en( s13 ),
    .Q( s9 )
  );
  Mux_2x1_NBits #(
    .Bits(12)
  )
  Mux_2x1_NBits_i6 (
    .sel( s0 ),
    .in_0( fg_i ),
    .in_1( fg_c ),
    .out( fg_o )
  );
  Mux_2x1_NBits #(
    .Bits(12)
  )
  Mux_2x1_NBits_i7 (
    .sel( s0 ),
    .in_0( bg_i ),
    .in_1( bg_c ),
    .out( bg_o )
  );
  Mux_4x1_NBits #(
    .Bits(7)
  )
  Mux_4x1_NBits_i8 (
    .sel( s5 ),
    .in_0( s6 ),
    .in_1( s7 ),
    .in_2( s8 ),
    .in_3( s9 ),
    .out( s1 )
  );
  Mux_2x1_NBits #(
    .Bits(7)
  )
  Mux_2x1_NBits_i9 (
    .sel( s0 ),
    .in_0( C_i ),
    .in_1( s1 ),
    .out( C_o )
  );
  assign CX_o = CX_i;
  assign CY_o = CY_i;
endmodule

module Mux_16x1_NBits #(
    parameter Bits = 2
)
(
    input [3:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    input [(Bits - 1):0] in_8,
    input [(Bits - 1):0] in_9,
    input [(Bits - 1):0] in_10,
    input [(Bits - 1):0] in_11,
    input [(Bits - 1):0] in_12,
    input [(Bits - 1):0] in_13,
    input [(Bits - 1):0] in_14,
    input [(Bits - 1):0] in_15,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            4'h0: out = in_0;
            4'h1: out = in_1;
            4'h2: out = in_2;
            4'h3: out = in_3;
            4'h4: out = in_4;
            4'h5: out = in_5;
            4'h6: out = in_6;
            4'h7: out = in_7;
            4'h8: out = in_8;
            4'h9: out = in_9;
            4'ha: out = in_10;
            4'hb: out = in_11;
            4'hc: out = in_12;
            4'hd: out = in_13;
            4'he: out = in_14;
            4'hf: out = in_15;
            default:
                out = 'h0;
        endcase
    end
endmodule


module digit2ascii (
  input [3:0] D,
  output [6:0] A
);
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i0 (
    .sel( D ),
    .in_0( 7'b110000 ),
    .in_1( 7'b110001 ),
    .in_2( 7'b110010 ),
    .in_3( 7'b110011 ),
    .in_4( 7'b110100 ),
    .in_5( 7'b110101 ),
    .in_6( 7'b110110 ),
    .in_7( 7'b110111 ),
    .in_8( 7'b111000 ),
    .in_9( 7'b111001 ),
    .in_10( 7'b1000001 ),
    .in_11( 7'b1000010 ),
    .in_12( 7'b1000011 ),
    .in_13( 7'b1000100 ),
    .in_14( 7'b1000101 ),
    .in_15( 7'b1000110 ),
    .out( A )
  );
endmodule

module vga_hex (
  input [7:0] CX_i,
  input [7:0] CY_i,
  input [6:0] C_i,
  input [11:0] fg_i,
  input [11:0] bg_i,
  input [11:0] fg_c,
  input [11:0] bg_c,
  input [5:0] CX_c,
  input [7:0] CY_c,
  input [15:0] N,
  input en,
  input clock,
  output [7:0] CX_o,
  output [7:0] CY_o,
  output [6:0] C_o,
  output [11:0] fg_o,
  output [11:0] bg_o
);
  wire [6:0] s0;
  wire [6:0] s1;
  wire [6:0] s2;
  wire [6:0] s3;
  wire [3:0] s4;
  wire [3:0] s5;
  wire [3:0] s6;
  wire [3:0] s7;
  assign s7 = N[3:0];
  assign s6 = N[7:4];
  assign s5 = N[11:8];
  assign s4 = N[15:12];
  digit2ascii digit2ascii_i0 (
    .D( s4 ),
    .A( s0 )
  );
  digit2ascii digit2ascii_i1 (
    .D( s5 ),
    .A( s1 )
  );
  digit2ascii digit2ascii_i2 (
    .D( s6 ),
    .A( s2 )
  );
  digit2ascii digit2ascii_i3 (
    .D( s7 ),
    .A( s3 )
  );
  vga_string vga_string_i4 (
    .CX_i( CX_i ),
    .CY_i( CY_i ),
    .C_i( C_i ),
    .fg_i( fg_i ),
    .bg_i( bg_i ),
    .fg_c( fg_c ),
    .bg_c( bg_c ),
    .CX_c( CX_c ),
    .CY_c( CY_c ),
    .C_0( s0 ),
    .C_1( s1 ),
    .C_2( s2 ),
    .C_3( s3 ),
    .en( en ),
    .clock( clock ),
    .CX_o( CX_o ),
    .CY_o( CY_o ),
    .C_o( C_o ),
    .fg_o( fg_o ),
    .bg_o( bg_o )
  );
endmodule
module DIG_D_FF_Nbit
#(
    parameter Bits = 2,
    parameter Default = 0
)
(
   input [(Bits-1):0] D,
   input C,
   output [(Bits-1):0] Q,
   output [(Bits-1):0] \~Q
);
    reg [(Bits-1):0] state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module Mux_16x1
(
    input [3:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    input in_4,
    input in_5,
    input in_6,
    input in_7,
    input in_8,
    input in_9,
    input in_10,
    input in_11,
    input in_12,
    input in_13,
    input in_14,
    input in_15,
    output reg out
);
    always @ (*) begin
        case (sel)
            4'h0: out = in_0;
            4'h1: out = in_1;
            4'h2: out = in_2;
            4'h3: out = in_3;
            4'h4: out = in_4;
            4'h5: out = in_5;
            4'h6: out = in_6;
            4'h7: out = in_7;
            4'h8: out = in_8;
            4'h9: out = in_9;
            4'ha: out = in_10;
            4'hb: out = in_11;
            4'hc: out = in_12;
            4'hd: out = in_13;
            4'he: out = in_14;
            4'hf: out = in_15;
            default:
                out = 'h0;
        endcase
    end
endmodule


module vga_text (
  input H_i,
  input V_i,
  input pic,
  input [4:0] row,
  input [3:0] col,
  input [15:0] CD,
  input clock,
  input [6:0] char,
  input [11:0] fg,
  input [11:0] bg,
  output [3:0] R,
  output [3:0] G,
  output [3:0] B,
  output hs,
  output vs,
  output de,
  output [10:0] CA
);
  wire [6:0] s0;
  wire [4:0] s1;
  wire [5:0] s2;
  wire [3:0] s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire [1:0] s21;
  wire [11:0] s22;
  wire [11:0] s23;
  wire [11:0] s24;
  wire s25;
  wire [3:0] s26;
  wire [3:0] s27;
  wire [3:0] s28;
  wire [3:0] s29;
  wire s30;
  wire s31;
  wire s32;
  wire s33;
  wire s34;
  wire [11:0] s35;
  wire [11:0] s36;
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( H_i ),
    .C( clock ),
    .Q( s30 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i1 (
    .D( V_i ),
    .C( clock ),
    .Q( s32 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i2 (
    .D( col ),
    .C( clock ),
    .Q( s29 )
  );
  DIG_D_FF_Nbit #(
    .Bits(5),
    .Default(0)
  )
  DIG_D_FF_Nbit_i3 (
    .D( row ),
    .C( clock ),
    .Q( s1 )
  );
  DIG_D_FF_Nbit #(
    .Bits(7),
    .Default(0)
  )
  DIG_D_FF_Nbit_i4 (
    .D( char ),
    .C( clock ),
    .Q( s0 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i5 (
    .D( pic ),
    .C( clock ),
    .Q( s34 )
  );
  DIG_D_FF_Nbit #(
    .Bits(12),
    .Default(0)
  )
  DIG_D_FF_Nbit_i6 (
    .D( bg ),
    .C( clock ),
    .Q( s35 )
  );
  DIG_D_FF_Nbit #(
    .Bits(12),
    .Default(0)
  )
  DIG_D_FF_Nbit_i7 (
    .D( fg ),
    .C( clock ),
    .Q( s36 )
  );
  assign s19 = CD[0];
  assign s18 = CD[1];
  assign s17 = CD[2];
  assign s16 = CD[3];
  assign s15 = CD[4];
  assign s14 = CD[5];
  assign s13 = CD[6];
  assign s12 = CD[7];
  assign s11 = CD[8];
  assign s10 = CD[9];
  assign s9 = CD[10];
  assign s8 = CD[11];
  assign s7 = CD[12];
  assign s6 = CD[13];
  assign s5 = CD[14];
  assign s4 = CD[15];
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i8 (
    .D( s29 ),
    .C( clock ),
    .Q( s3 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i9 (
    .D( s30 ),
    .C( clock ),
    .Q( s31 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i10 (
    .D( s32 ),
    .C( clock ),
    .Q( s33 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i11 (
    .D( s34 ),
    .C( clock ),
    .Q( s25 )
  );
  DIG_D_FF_Nbit #(
    .Bits(12),
    .Default(0)
  )
  DIG_D_FF_Nbit_i12 (
    .D( s35 ),
    .C( clock ),
    .Q( s22 )
  );
  DIG_D_FF_Nbit #(
    .Bits(12),
    .Default(0)
  )
  DIG_D_FF_Nbit_i13 (
    .D( s36 ),
    .C( clock ),
    .Q( s23 )
  );
  assign s2[4:0] = s0[4:0];
  assign s2[5] = s0[6];
  assign CA[4:0] = s1;
  assign CA[10:5] = s2;
  Mux_16x1 Mux_16x1_i14 (
    .sel( s3 ),
    .in_0( s4 ),
    .in_1( s5 ),
    .in_2( s6 ),
    .in_3( s7 ),
    .in_4( s8 ),
    .in_5( s9 ),
    .in_6( s10 ),
    .in_7( s11 ),
    .in_8( s12 ),
    .in_9( s13 ),
    .in_10( s14 ),
    .in_11( s15 ),
    .in_12( s16 ),
    .in_13( s17 ),
    .in_14( s18 ),
    .in_15( s19 ),
    .out( s20 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i15 (
    .D( s33 ),
    .C( clock ),
    .Q( vs )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i16 (
    .D( s31 ),
    .C( clock ),
    .Q( hs )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i17 (
    .D( s25 ),
    .C( clock ),
    .Q( de )
  );
  assign s21[0] = s20;
  assign s21[1] = s25;
  Mux_4x1_NBits #(
    .Bits(12)
  )
  Mux_4x1_NBits_i18 (
    .sel( s21 ),
    .in_0( 12'b0 ),
    .in_1( 12'b0 ),
    .in_2( s22 ),
    .in_3( s23 ),
    .out( s24 )
  );
  assign s26 = s24[3:0];
  assign s27 = s24[7:4];
  assign s28 = s24[11:8];
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i19 (
    .D( s26 ),
    .C( clock ),
    .Q( B )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i20 (
    .D( s27 ),
    .C( clock ),
    .Q( G )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i21 (
    .D( s28 ),
    .C( clock ),
    .Q( R )
  );
endmodule

module vga_display (
  input clock,
  input [11:0] res_H,
  input [11:0] fp_H,
  input [11:0] sync_H,
  input [11:0] bp_H,
  input neg_H,
  input [11:0] res_V,
  input [11:0] fp_V,
  input [11:0] sync_V,
  input [11:0] bp_V,
  input neg_V,
  input [15:0] CD,
  output [3:0] R,
  output [3:0] G,
  output [3:0] B,
  output hs,
  output vs,
  output de,
  output [10:0] CA
);
  wire s0;
  wire s1;
  wire s2;
  wire [11:0] s3;
  wire [11:0] s4;
  wire [4:0] s5;
  wire [3:0] s6;
  wire [7:0] s7;
  wire [7:0] s8;
  wire [6:0] s9;
  wire [11:0] s10;
  wire [11:0] s11;
  wire [7:0] s12;
  wire [7:0] s13;
  wire [6:0] s14;
  wire [11:0] s15;
  wire [11:0] s16;
  wire [7:0] s17;
  wire [7:0] s18;
  wire [6:0] s19;
  wire [11:0] s20;
  wire [11:0] s21;
  wire [7:0] s22;
  wire [7:0] s23;
  wire [6:0] s24;
  wire [11:0] s25;
  wire [11:0] s26;
  wire [15:0] s27;
  wire [31:0] s28;
  vga_sync vga_sync_i0 (
    .clock( clock ),
    .res_H( res_H ),
    .fp_H( bp_H ),
    .sync_H( sync_H ),
    .bp_H( fp_H ),
    .neg_H( neg_H ),
    .res_V( res_V ),
    .fp_V( bp_V ),
    .sync_V( sync_V ),
    .bp_V( fp_V ),
    .neg_V( neg_V ),
    .H( s0 ),
    .V( s1 ),
    .pic( s2 ),
    .X( s3 ),
    .Y( s4 )
  );
  DIG_Counter_Nbit #(
    .Bits(32)
  )
  DIG_Counter_Nbit_i1 (
    .en( 1'b1 ),
    .C( clock ),
    .clr( 1'b0 ),
    .out( s28 )
  );
  vga_charpos vga_charpos_i2 (
    .X( s3 ),
    .Y( s4 ),
    .row( s5 ),
    .col( s6 ),
    .CX( s7 ),
    .CY( s8 )
  );
  assign s27 = s28[29:14];
  vga_string vga_string_i3 (
    .CX_i( s7 ),
    .CY_i( s8 ),
    .C_i( 7'b0 ),
    .fg_i( 12'b0 ),
    .bg_i( 12'b0 ),
    .fg_c( 12'b111000000111 ),
    .bg_c( 12'b1000100010 ),
    .CX_c( 6'b11 ),
    .CY_c( 8'b111 ),
    .C_0( 7'b1001000 ),
    .C_1( 7'b1000101 ),
    .C_2( 7'b1001100 ),
    .C_3( 7'b1001100 ),
    .en( 1'b1 ),
    .clock( clock ),
    .CX_o( s12 ),
    .CY_o( s13 ),
    .C_o( s14 ),
    .fg_o( s15 ),
    .bg_o( s16 )
  );
  vga_string vga_string_i4 (
    .CX_i( s12 ),
    .CY_i( s13 ),
    .C_i( s14 ),
    .fg_i( s15 ),
    .bg_i( s16 ),
    .fg_c( 12'b111000000111 ),
    .bg_c( 12'b1000100010 ),
    .CX_c( 6'b100 ),
    .CY_c( 8'b111 ),
    .C_0( 7'b1001111 ),
    .C_1( 7'b100000 ),
    .C_2( 7'b1010111 ),
    .C_3( 7'b1001111 ),
    .en( 1'b1 ),
    .clock( clock ),
    .CX_o( s17 ),
    .CY_o( s18 ),
    .C_o( s19 ),
    .fg_o( s20 ),
    .bg_o( s21 )
  );
  vga_string vga_string_i5 (
    .CX_i( s17 ),
    .CY_i( s18 ),
    .C_i( s19 ),
    .fg_i( s20 ),
    .bg_i( s21 ),
    .fg_c( 12'b111000000111 ),
    .bg_c( 12'b1000100010 ),
    .CX_c( 6'b101 ),
    .CY_c( 8'b111 ),
    .C_0( 7'b1010010 ),
    .C_1( 7'b1001100 ),
    .C_2( 7'b1000100 ),
    .C_3( 7'b100001 ),
    .en( 1'b1 ),
    .clock( clock ),
    .CX_o( s22 ),
    .CY_o( s23 ),
    .C_o( s24 ),
    .fg_o( s25 ),
    .bg_o( s26 )
  );
  vga_hex vga_hex_i6 (
    .CX_i( s22 ),
    .CY_i( s23 ),
    .C_i( s24 ),
    .fg_i( s25 ),
    .bg_i( s26 ),
    .fg_c( 12'b110111110 ),
    .bg_c( 12'b1000100010 ),
    .CX_c( 6'b100 ),
    .CY_c( 8'b1000 ),
    .N( s27 ),
    .en( 1'b1 ),
    .clock( clock ),
    .C_o( s9 ),
    .fg_o( s10 ),
    .bg_o( s11 )
  );
  vga_text vga_text_i7 (
    .H_i( s0 ),
    .V_i( s1 ),
    .pic( s2 ),
    .row( s5 ),
    .col( s6 ),
    .CD( CD ),
    .clock( clock ),
    .char( s9 ),
    .fg( s10 ),
    .bg( s11 ),
    .R( R ),
    .G( G ),
    .B( B ),
    .hs( hs ),
    .vs( vs ),
    .de( de ),
    .CA( CA )
  );
endmodule
