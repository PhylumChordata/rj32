<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>1</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>add</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>clock run error halt

# #include &quot;../cpudef.asm&quot;
# 
# move r1, 5
# move r2, 3
# add r1, r2
# add r1, 2
# if.ne r1, 10
# error
# halt

program(0x1171, 0x20f1, 0x1280, 0x1081, 0x1523, 0x0010, 0x0018)

let i = 0;
while(!(halt | error | (i &gt;= 100)))
  let i = i + 1;
  0 1 0 0
  1 1 x x
end while
0 1 0 1</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="340" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>frontpanel.dig</elementName>
      <elementAttributes/>
      <pos x="780" y="140"/>
    </visualElement>
    <visualElement>
      <elementName>Clock</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>clock</string>
        </entry>
      </elementAttributes>
      <pos x="740" y="140"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>error</string>
        </entry>
      </elementAttributes>
      <pos x="1040" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>halt</string>
        </entry>
      </elementAttributes>
      <pos x="1040" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>PC</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="1040" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>jump</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>clock run error halt

# #include &quot;../cpudef.asm&quot;
# 
#   jump one
#   halt
# three:
#   add r0, r1
#   add r0, r2
#   jump end
#   halt
# two:
#   move r2, 2
#   jump three
#   halt
# one:
#   move r1, 3
#   jump two
#   halt
# end:
#   if.ne r0, 5
#   error
#   halt

program(0x0095, 0x0018, 0x0180, 0x0280, 0x00c5, 0x0018, 0x20b1, 0x0025, 0x0018, 0x10f1, 0x0065, 0x0018, 0x02a3, 0x0010, 0x0018)

let i = 0;
while(!(halt | error | (i &gt;= 100)))
  let i = i + 1;
  0 1 0 0
  1 1 x x
end while
0 1 0 1
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="340" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>if.eq</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>clock run error halt

# #include &quot;../cpudef.asm&quot;
# 
# move r1, 2
# move r2, 3
# move r3, 3
# 
# ; skip r-r
# if.eq r1, r2
# error
# 
# ; skip r-i
# if.eq r1, 3
# error
# 
# ; no-skip r-r
# if.eq r2, r3
# jump p1
# error
# p1:
# 
# ; no-skip r-i
# if.eq r2, 3
# jump p2
# error
# p2:
# 
# halt

program(0x10b1, 0x20f1, 0x30f1, 0x1212, 0x0010, 0x1193, 0x0010, 0x2312, 0x00a5, 0x0010, 0x2193, 0x00d5, 0x0010, 0x0018)

let i = 0;
while(!(halt | error | (i &gt;= 100)))
  let i = i + 1;
  0 1 0 0
  1 1 x x
end while
0 1 0 1
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="340" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>run</string>
        </entry>
      </elementAttributes>
      <pos x="740" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>loadstore</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>clock run error halt

# #include &quot;../cpudef.asm&quot;
# 
# move r0, 2
# move r1, 5
# 
# ; memory doesn&apos;t have 5
# load r2, [r0,0]
# if.eq r2, 5
# error
# 
# ; store and check it does have 5
# store [r0,0], r1
# load r2, [r0,0]
# if.ne r2, 5
# error
# 
# ; check max offset of 31
# move r1, 7
# store [r0,31], r1
# load r2, [r0,31]
# if.ne r2, 7
# error
# 
# ; check base equivalent to offset
# move r2, 0
# add r0, 15
# add r0, 15
# add r0, 1
# load r2, [r0, 0]
# if.ne r2, 7
# error
# 
# halt

program(0x00b1, 0x1171, 0x2006, 0x2293, 0x0010, 0x1007, 0x2006, 0x22a3, 0x0010, 0x11f1, 0x10ff, 0x20fe, 0x23a3, 0x0010, 0x2031, 0x03c1, 0x03c1, 0x0041, 0x2006, 0x23a3, 0x0010, 0x0018)

let i = 0;
while(!(halt | error | (i &gt;= 100)))
  let i = i + 1;
  0 1 0 0
  1 1 x x
end while
0 1 0 1
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="480" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>if.ne</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>clock run error halt

# #include &quot;../cpudef.asm&quot;
# 
# move r1, 2
# move r2, 3
# move r3, 3
# 
# ; skip r-r
# if.ne r2, r2
# error
# 
# ; skip r-i
# if.ne r1, 2
# error
# 
# ; no-skip r-r
# if.ne r2, r1
# jump p1
# error
# p1:
# 
# ; no-skip r-i
# if.ne r2, 2
# jump p2
# error
# p2:
# 
# halt

program(0x10b1, 0x20f1, 0x30f1, 0x2222, 0x0010, 0x1123, 0x0010, 0x2122, 0x00a5, 0x0010, 0x2123, 0x00d5, 0x0010, 0x0018)

let i = 0;
while(!(halt | error | (i &gt;= 100)))
  let i = i + 1;
  0 1 0 0
  1 1 x x
end while
0 1 0 1
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="480" y="320"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="1020" y="240"/>
      <p2 x="1040" y="240"/>
    </wire>
    <wire>
      <p1 x="920" y="240"/>
      <p2 x="1000" y="240"/>
    </wire>
    <wire>
      <p1 x="760" y="160"/>
      <p2 x="780" y="160"/>
    </wire>
    <wire>
      <p1 x="920" y="260"/>
      <p2 x="980" y="260"/>
    </wire>
    <wire>
      <p1 x="740" y="180"/>
      <p2 x="760" y="180"/>
    </wire>
    <wire>
      <p1 x="980" y="360"/>
      <p2 x="1040" y="360"/>
    </wire>
    <wire>
      <p1 x="740" y="140"/>
      <p2 x="780" y="140"/>
    </wire>
    <wire>
      <p1 x="920" y="220"/>
      <p2 x="1020" y="220"/>
    </wire>
    <wire>
      <p1 x="1000" y="300"/>
      <p2 x="1040" y="300"/>
    </wire>
    <wire>
      <p1 x="980" y="260"/>
      <p2 x="980" y="360"/>
    </wire>
    <wire>
      <p1 x="1000" y="240"/>
      <p2 x="1000" y="300"/>
    </wire>
    <wire>
      <p1 x="760" y="160"/>
      <p2 x="760" y="180"/>
    </wire>
    <wire>
      <p1 x="1020" y="220"/>
      <p2 x="1020" y="240"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>