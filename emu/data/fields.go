// Code generated by github.com/rj45/rj32/emu/bitfield. DO NOT EDIT.

package data

type SpriteSheetID uint16

func (s SpriteSheetID) Sheet() int {
	return int((s >> 12) & 0xf)
}

func (s SpriteSheetID) SetSheet(v int) SpriteSheetID {
	s &= ^SpriteSheetID(0xf << 12)
	s |= (SpriteSheetID(v) & 0xf) << 12
	return s
}

func (s SpriteSheetID) SheetY() int {
	return int((s >> 7) & 0x1f)
}

func (s SpriteSheetID) SetSheetY(v int) SpriteSheetID {
	s &= ^SpriteSheetID(0x1f << 7)
	s |= (SpriteSheetID(v) & 0x1f) << 7
	return s
}

func (s SpriteSheetID) SheetX() int {
	return int((s >> 0) & 0x7f)
}

func (s SpriteSheetID) SetSheetX(v int) SpriteSheetID {
	s &= ^SpriteSheetID(0x7f << 0)
	s |= (SpriteSheetID(v) & 0x7f) << 0
	return s
}

type SpriteY uint16

func (s SpriteY) Transparent() bool {
	const bit = 1 << 15
	return s&bit == bit
}

func (s SpriteY) SetTransparent(v bool) SpriteY {
	const bit = 1 << 15
	if v {
		return s | bit
	}
	return s & ^SpriteY(bit)
}

func (s SpriteY) FlipY() bool {
	const bit = 1 << 14
	return s&bit == bit
}

func (s SpriteY) SetFlipY(v bool) SpriteY {
	const bit = 1 << 14
	if v {
		return s | bit
	}
	return s & ^SpriteY(bit)
}

func (s SpriteY) Height() int {
	return int((s >> 11) & 0x7)
}

func (s SpriteY) SetHeight(v int) SpriteY {
	s &= ^SpriteY(0x7 << 11)
	s |= (SpriteY(v) & 0x7) << 11
	return s
}

func (s SpriteY) Y() int {
	return int((s >> 0) & 0x7ff)
}

func (s SpriteY) SetY(v int) SpriteY {
	s &= ^SpriteY(0x7ff << 0)
	s |= (SpriteY(v) & 0x7ff) << 0
	return s
}

type SpriteX uint16

func (s SpriteX) FlipX() bool {
	const bit = 1 << 15
	return s&bit == bit
}

func (s SpriteX) SetFlipX(v bool) SpriteX {
	const bit = 1 << 15
	if v {
		return s | bit
	}
	return s & ^SpriteX(bit)
}

func (s SpriteX) Width() int {
	return int((s >> 12) & 0x7)
}

func (s SpriteX) SetWidth(v int) SpriteX {
	s &= ^SpriteX(0x7 << 12)
	s |= (SpriteX(v) & 0x7) << 12
	return s
}

func (s SpriteX) X() int {
	return int((s >> 0) & 0xfff)
}

func (s SpriteX) SetX(v int) SpriteX {
	s &= ^SpriteX(0xfff << 0)
	s |= (SpriteX(v) & 0xfff) << 0
	return s
}

type Tile uint16

func (t Tile) Palette() int {
	return int((t >> 11) & 0x1f)
}

func (t Tile) SetPalette(v int) Tile {
	t &= ^Tile(0x1f << 11)
	t |= (Tile(v) & 0x1f) << 11
	return t
}

func (t Tile) TileID() int {
	return int((t >> 0) & 0x7ff)
}

func (t Tile) SetTileID(v int) Tile {
	t &= ^Tile(0x7ff << 0)
	t |= (Tile(v) & 0x7ff) << 0
	return t
}

type Pixels uint16

func (p Pixels) Color3() int {
	return int((p >> 12) & 0xf)
}

func (p Pixels) SetColor3(v int) Pixels {
	p &= ^Pixels(0xf << 12)
	p |= (Pixels(v) & 0xf) << 12
	return p
}

func (p Pixels) Color2() int {
	return int((p >> 8) & 0xf)
}

func (p Pixels) SetColor2(v int) Pixels {
	p &= ^Pixels(0xf << 8)
	p |= (Pixels(v) & 0xf) << 8
	return p
}

func (p Pixels) Color1() int {
	return int((p >> 4) & 0xf)
}

func (p Pixels) SetColor1(v int) Pixels {
	p &= ^Pixels(0xf << 4)
	p |= (Pixels(v) & 0xf) << 4
	return p
}

func (p Pixels) Color0() int {
	return int((p >> 0) & 0xf)
}

func (p Pixels) SetColor0(v int) Pixels {
	p &= ^Pixels(0xf << 0)
	p |= (Pixels(v) & 0xf) << 0
	return p
}

type Color uint16

func (c Color) A() int {
	return int((c >> 12) & 0xf)
}

func (c Color) SetA(v int) Color {
	c &= ^Color(0xf << 12)
	c |= (Color(v) & 0xf) << 12
	return c
}

func (c Color) R() int {
	return int((c >> 8) & 0xf)
}

func (c Color) SetR(v int) Color {
	c &= ^Color(0xf << 8)
	c |= (Color(v) & 0xf) << 8
	return c
}

func (c Color) G() int {
	return int((c >> 4) & 0xf)
}

func (c Color) SetG(v int) Color {
	c &= ^Color(0xf << 4)
	c |= (Color(v) & 0xf) << 4
	return c
}

func (c Color) B() int {
	return int((c >> 0) & 0xf)
}

func (c Color) SetB(v int) Color {
	c &= ^Color(0xf << 0)
	c |= (Color(v) & 0xf) << 0
	return c
}

