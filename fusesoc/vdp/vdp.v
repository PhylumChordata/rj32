/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module vdp_DIG_Register_BUS #(
    parameter Bits = 1
)
(
    input C,
    input en,
    input [(Bits - 1):0]D,
    output [(Bits - 1):0]Q
);

    reg [(Bits - 1):0] state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module vdp_CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


module vdp_equals_gen0 (
  input [11:0] A,
  input [11:0] B,
  output Q
);
  // =
  vdp_CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i0 (
    .a( A ),
    .b( B ),
    .\= ( Q )
  );
endmodule
module vdp_DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module vdp_plusone_gen0 (
  input [11:0] A,
  output [11:0] Y
);
  // +1
  vdp_DIG_Add #(
    .Bits(12)
  )
  DIG_Add_i0 (
    .a( A ),
    .b( 12'b0 ),
    .c_i( 1'b1 ),
    .s( Y )
  );
endmodule

module vdp_Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module vdp_maxcounter_gen0 (
  input en,
  input C,
  input [11:0] max,
  input rst,
  output [11:0] Q,
  output ovf
);
  wire [11:0] s0;
  wire [11:0] Q_temp;
  wire [11:0] s1;
  wire s2;
  wire ovf_temp;
  vdp_DIG_Register_BUS #(
    .Bits(12)
  )
  DIG_Register_BUS_i0 (
    .D( s0 ),
    .C( C ),
    .en( en ),
    .Q( Q_temp )
  );
  vdp_equals_gen0 equals_gen0_i1 (
    .A( s1 ),
    .B( max ),
    .Q( ovf_temp )
  );
  assign s2 = (ovf_temp | rst);
  vdp_plusone_gen0 plusone_gen0_i2 (
    .A( Q_temp ),
    .Y( s1 )
  );
  vdp_Mux_2x1_NBits #(
    .Bits(12)
  )
  Mux_2x1_NBits_i3 (
    .sel( s2 ),
    .in_0( s1 ),
    .in_1( 12'b0 ),
    .out( s0 )
  );
  assign Q = Q_temp;
  assign ovf = ovf_temp;
endmodule

module vdp_scanxy (
  input C,
  input rst,
  input en,
  input [11:0] hr,
  input [11:0] vr,
  output [11:0] X,
  output [11:0] Y,
  output nl,
  output nf
);
  wire s0;
  wire nl_temp;
  wire s1;
  // X
  vdp_maxcounter_gen0 maxcounter_gen0_i0 (
    .en( en ),
    .C( C ),
    .max( hr ),
    .rst( rst ),
    .Q( X ),
    .ovf( s0 )
  );
  assign nl_temp = (s0 & en);
  // Y
  vdp_maxcounter_gen0 maxcounter_gen0_i1 (
    .en( nl_temp ),
    .C( C ),
    .max( vr ),
    .rst( rst ),
    .Q( Y ),
    .ovf( s1 )
  );
  assign nf = (nl_temp & s1);
  assign nl = nl_temp;
endmodule

module vdp_equals_gen1 (
  input [11:0] A,
  input [11:0] B,
  output Q
);
  // =
  vdp_CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i0 (
    .a( A ),
    .b( B ),
    .\= ( Q )
  );
endmodule
module vdp_DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module vdp_rsff (
  input S,
  input C,
  input R,
  output Q,
  output \~Q
);
  wire Q_temp;
  wire s0;
  assign s0 = ((Q_temp | S) & ~ R);
  vdp_DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( s0 ),
    .C( C ),
    .Q( Q_temp ),
    .\~Q ( \~Q  )
  );
  assign Q = Q_temp;
endmodule

module vdp_Mux_2x1
(
    input [0:0] sel,
    input in_0,
    input in_1,
    output reg out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module vdp_sync (
  input clk,
  input rst,
  input [11:0] v,
  input [11:0] fp,
  input [11:0] sn,
  input [11:0] bp,
  input n,
  input neg,
  output b,
  output s
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  vdp_equals_gen1 equals_gen1_i0 (
    .A( v ),
    .B( fp ),
    .Q( s0 )
  );
  vdp_equals_gen1 equals_gen1_i1 (
    .A( v ),
    .B( sn ),
    .Q( s1 )
  );
  vdp_equals_gen1 equals_gen1_i2 (
    .A( v ),
    .B( bp ),
    .Q( s2 )
  );
  assign s3 = (rst | n);
  assign s4 = (rst | s2);
  vdp_rsff rsff_i3 (
    .S( s0 ),
    .C( clk ),
    .R( s3 ),
    .Q( b )
  );
  vdp_rsff rsff_i4 (
    .S( s1 ),
    .C( clk ),
    .R( s4 ),
    .Q( s5 ),
    .\~Q ( s6 )
  );
  vdp_Mux_2x1 Mux_2x1_i5 (
    .sel( neg ),
    .in_0( s5 ),
    .in_1( s6 ),
    .out( s )
  );
endmodule

module vdp_vgasync (
  input clk,
  input rst,
  input [11:0] X_i,
  input [11:0] Y_i,
  input nl_i,
  input nf_i,
  input [11:0] hfp,
  input [11:0] hsn,
  input [11:0] hbp,
  input hneg,
  input [11:0] vfp,
  input [11:0] vsn,
  input [11:0] vbp,
  input vneg,
  output [11:0] X_o,
  output [11:0] Y_o,
  output nl_o,
  output nf_o,
  output hs,
  output vs,
  output de
);
  wire s0;
  wire s1;
  // H
  vdp_sync sync_i0 (
    .clk( clk ),
    .rst( rst ),
    .v( X_i ),
    .fp( hfp ),
    .sn( hsn ),
    .bp( hbp ),
    .n( nl_i ),
    .neg( hneg ),
    .b( s0 ),
    .s( hs )
  );
  // V
  vdp_sync sync_i1 (
    .clk( clk ),
    .rst( rst ),
    .v( Y_i ),
    .fp( vfp ),
    .sn( vsn ),
    .bp( vbp ),
    .n( nf_i ),
    .neg( vneg ),
    .b( s1 ),
    .s( vs )
  );
  assign de = ~ (s0 | s1);
  assign X_o = X_i;
  assign Y_o = Y_i;
  assign nl_o = nl_i;
  assign nf_o = nf_i;
endmodule

module vdp_DemuxBus2 #(
    parameter Bits = 2
)
(
    output [(Bits-1):0] out_0,
    output [(Bits-1):0] out_1,
    output [(Bits-1):0] out_2,
    output [(Bits-1):0] out_3,
    input [1:0] sel,
    input [(Bits-1):0] in
);
    assign out_0 = (sel == 2'h0)? in : 'd0;
    assign out_1 = (sel == 2'h1)? in : 'd0;
    assign out_2 = (sel == 2'h2)? in : 'd0;
    assign out_3 = (sel == 2'h3)? in : 'd0;
endmodule


module vdp_engine (
  input clk,
  input rst,
  input [11:0] X_i,
  input [11:0] Y_i,
  input nl_i,
  input nf_i,
  input hs_i,
  input vs_i,
  input de_i,
  output [11:0] X_o,
  output [11:0] Y_o,
  output nl_o,
  output nf_o,
  output [7:0] R,
  output [7:0] G,
  output [7:0] B,
  output hs_o,
  output vs_o,
  output de_o
);
  wire [7:0] s0;
  wire [1:0] s1;
  wire [7:0] s2;
  wire [7:0] s3;
  wire [7:0] s4;
  wire [7:0] s5;
  wire [7:0] s6;
  wire [7:0] s7;
  wire [7:0] s8;
  assign s0 = X_i[8:1];
  assign s1 = Y_i[7:6];
  vdp_DemuxBus2 #(
    .Bits(8)
  )
  DemuxBus2_i0 (
    .sel( s1 ),
    .in( s0 ),
    .out_0( s2 ),
    .out_1( s3 ),
    .out_2( s4 ),
    .out_3( s5 )
  );
  assign s6 = (s2 | s5);
  assign s7 = (s3 | s5);
  assign s8 = (s4 | s5);
  vdp_Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i1 (
    .sel( de_i ),
    .in_0( 8'b0 ),
    .in_1( s6 ),
    .out( R )
  );
  vdp_Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i2 (
    .sel( de_i ),
    .in_0( 8'b0 ),
    .in_1( s7 ),
    .out( G )
  );
  vdp_Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i3 (
    .sel( de_i ),
    .in_0( 8'b0 ),
    .in_1( s8 ),
    .out( B )
  );
  assign X_o = X_i;
  assign Y_o = Y_i;
  assign nl_o = nl_i;
  assign nf_o = nf_i;
  assign hs_o = hs_i;
  assign vs_o = vs_i;
  assign de_o = de_i;
endmodule

module vdp (
  input clk,
  input rst,
  input [11:0] hfp,
  input [11:0] hsn,
  input [11:0] hbp,
  input [11:0] httl,
  input hneg,
  input [11:0] vfp,
  input [11:0] vsn,
  input [11:0] vbp,
  input [11:0] vttl,
  input vneg,
  output [7:0] R,
  output [7:0] G,
  output [7:0] B,
  output hs,
  output vs,
  output de,
  output [11:0] X,
  output [11:0] Y,
  output nl,
  output nf
);
  wire [11:0] s0;
  wire [11:0] s1;
  wire s2;
  wire s3;
  wire [11:0] s4;
  wire [11:0] s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  vdp_scanxy scanxy_i0 (
    .C( clk ),
    .rst( rst ),
    .en( 1'b1 ),
    .hr( httl ),
    .vr( vttl ),
    .X( s0 ),
    .Y( s1 ),
    .nl( s2 ),
    .nf( s3 )
  );
  vdp_vgasync vgasync_i1 (
    .clk( clk ),
    .rst( rst ),
    .X_i( s0 ),
    .Y_i( s1 ),
    .nl_i( s2 ),
    .nf_i( s3 ),
    .hfp( hfp ),
    .hsn( hsn ),
    .hbp( hbp ),
    .hneg( hneg ),
    .vfp( vfp ),
    .vsn( vsn ),
    .vbp( vbp ),
    .vneg( vneg ),
    .X_o( s4 ),
    .Y_o( s5 ),
    .nl_o( s6 ),
    .nf_o( s7 ),
    .hs( s8 ),
    .vs( s9 ),
    .de( s10 )
  );
  vdp_engine engine_i2 (
    .clk( clk ),
    .rst( rst ),
    .X_i( s4 ),
    .Y_i( s5 ),
    .nl_i( s6 ),
    .nf_i( s7 ),
    .hs_i( s8 ),
    .vs_i( s9 ),
    .de_i( s10 ),
    .X_o( X ),
    .Y_o( Y ),
    .nl_o( nl ),
    .nf_o( nf ),
    .R( R ),
    .G( G ),
    .B( B ),
    .hs_o( hs ),
    .vs_o( vs ),
    .de_o( de )
  );
endmodule
