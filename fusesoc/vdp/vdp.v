/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_Register_BUS #(
    parameter Bits = 1
)
(
    input C,
    input en,
    input [(Bits - 1):0]D,
    output [(Bits - 1):0]Q
);

    reg [(Bits - 1):0] state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


module equals_gen0 (
  input [11:0] A,
  input [11:0] B,
  output Q
);
  // =
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i0 (
    .a( A ),
    .b( B ),
    .\= ( Q )
  );
endmodule
module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module plusone_gen0 (
  input [11:0] A,
  output [11:0] Y
);
  // +1
  DIG_Add #(
    .Bits(12)
  )
  DIG_Add_i0 (
    .a( A ),
    .b( 12'b0 ),
    .c_i( 1'b1 ),
    .s( Y )
  );
endmodule

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module maxcounter_gen0 (
  input en,
  input C,
  input [11:0] max,
  input rst,
  output [11:0] Q,
  output ovf,
  output [11:0] N
);
  wire [11:0] s0;
  wire [11:0] Q_temp;
  wire [11:0] N_temp;
  wire s1;
  wire ovf_temp;
  DIG_Register_BUS #(
    .Bits(12)
  )
  DIG_Register_BUS_i0 (
    .D( s0 ),
    .C( C ),
    .en( en ),
    .Q( Q_temp )
  );
  equals_gen0 equals_gen0_i1 (
    .A( N_temp ),
    .B( max ),
    .Q( ovf_temp )
  );
  assign s1 = (ovf_temp | rst);
  plusone_gen0 plusone_gen0_i2 (
    .A( Q_temp ),
    .Y( N_temp )
  );
  Mux_2x1_NBits #(
    .Bits(12)
  )
  Mux_2x1_NBits_i3 (
    .sel( s1 ),
    .in_0( N_temp ),
    .in_1( 12'b0 ),
    .out( s0 )
  );
  assign Q = Q_temp;
  assign ovf = ovf_temp;
  assign N = N_temp;
endmodule

module scanxy (
  input C,
  input rst,
  input en,
  input [11:0] hr,
  input [11:0] vr,
  output [11:0] nx,
  output [11:0] ny,
  output [11:0] x,
  output [11:0] y,
  output nl,
  output nf
);
  wire s0;
  wire nl_temp;
  wire s1;
  // X
  maxcounter_gen0 maxcounter_gen0_i0 (
    .en( en ),
    .C( C ),
    .max( hr ),
    .rst( rst ),
    .Q( x ),
    .ovf( s0 ),
    .N( nx )
  );
  assign nl_temp = (s0 & en);
  // Y
  maxcounter_gen0 maxcounter_gen0_i1 (
    .en( nl_temp ),
    .C( C ),
    .max( vr ),
    .rst( rst ),
    .Q( y ),
    .ovf( s1 ),
    .N( ny )
  );
  assign nf = (nl_temp & s1);
  assign nl = nl_temp;
endmodule

module equals_gen1 (
  input [11:0] A,
  input [11:0] B,
  output Q
);
  // =
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i0 (
    .a( A ),
    .b( B ),
    .\= ( Q )
  );
endmodule
module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module rsff (
  input S,
  input C,
  input R,
  output Q,
  output \~Q 
);
  wire Q_temp;
  wire s0;
  assign s0 = ((Q_temp | S) & ~ R);
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( s0 ),
    .C( C ),
    .Q( Q_temp ),
    .\~Q ( \~Q  )
  );
  assign Q = Q_temp;
endmodule

module Mux_2x1
(
    input [0:0] sel,
    input in_0,
    input in_1,
    output reg out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module sync (
  input clk,
  input rst,
  input [11:0] v,
  input [11:0] fp,
  input [11:0] sn,
  input [11:0] bp,
  input n,
  input neg,
  output b,
  output s
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  equals_gen1 equals_gen1_i0 (
    .A( v ),
    .B( fp ),
    .Q( s0 )
  );
  equals_gen1 equals_gen1_i1 (
    .A( v ),
    .B( sn ),
    .Q( s1 )
  );
  equals_gen1 equals_gen1_i2 (
    .A( v ),
    .B( bp ),
    .Q( s2 )
  );
  assign s3 = (rst | n);
  assign s4 = (rst | s2);
  rsff rsff_i3 (
    .S( s0 ),
    .C( clk ),
    .R( s3 ),
    .Q( b )
  );
  rsff rsff_i4 (
    .S( s1 ),
    .C( clk ),
    .R( s4 ),
    .Q( s5 ),
    .\~Q ( s6 )
  );
  Mux_2x1 Mux_2x1_i5 (
    .sel( neg ),
    .in_0( s5 ),
    .in_1( s6 ),
    .out( s )
  );
endmodule

module vgasync (
  input clk,
  input rst,
  input [11:0] nx,
  input [11:0] ny,
  input [11:0] x_i,
  input [11:0] y_i,
  input nl_i,
  input nf_i,
  input [11:0] hfp,
  input [11:0] hsn,
  input [11:0] hbp,
  input hneg,
  input [11:0] vfp,
  input [11:0] vsn,
  input [11:0] vbp,
  input vneg,
  output [11:0] x_o,
  output [11:0] y_o,
  output nl_o,
  output nf_o,
  output hs,
  output vs,
  output de
);
  wire s0;
  wire s1;
  // H
  sync sync_i0 (
    .clk( clk ),
    .rst( rst ),
    .v( nx ),
    .fp( hfp ),
    .sn( hsn ),
    .bp( hbp ),
    .n( nl_i ),
    .neg( hneg ),
    .b( s0 ),
    .s( hs )
  );
  // V
  sync sync_i1 (
    .clk( clk ),
    .rst( rst ),
    .v( ny ),
    .fp( vfp ),
    .sn( vsn ),
    .bp( vbp ),
    .n( nf_i ),
    .neg( vneg ),
    .b( s1 ),
    .s( vs )
  );
  assign de = ~ (s0 | s1);
  assign x_o = x_i;
  assign y_o = y_i;
  assign nl_o = nl_i;
  assign nf_o = nf_i;
endmodule

module DemuxBus2 #(
    parameter Bits = 2
)
(
    output [(Bits-1):0] out_0,
    output [(Bits-1):0] out_1,
    output [(Bits-1):0] out_2,
    output [(Bits-1):0] out_3,
    input [1:0] sel,
    input [(Bits-1):0] in
);
    assign out_0 = (sel == 2'h0)? in : 'd0;
    assign out_1 = (sel == 2'h1)? in : 'd0;
    assign out_2 = (sel == 2'h2)? in : 'd0;
    assign out_3 = (sel == 2'h3)? in : 'd0;
endmodule


module engine (
  input clk,
  input rst,
  input [11:0] X_i,
  input [11:0] Y_i,
  input nl_i,
  input nf_i,
  input hs_i,
  input vs_i,
  input de_i,
  output [11:0] X_o,
  output [11:0] Y_o,
  output nl_o,
  output nf_o,
  output [7:0] R,
  output [7:0] G,
  output [7:0] B,
  output hs_o,
  output vs_o,
  output de_o
);
  wire [7:0] s0;
  wire [1:0] s1;
  wire [7:0] s2;
  wire [7:0] s3;
  wire [7:0] s4;
  wire [7:0] s5;
  wire [7:0] s6;
  wire [7:0] s7;
  wire [7:0] s8;
  assign s0 = X_i[8:1];
  assign s1 = Y_i[7:6];
  DemuxBus2 #(
    .Bits(8)
  )
  DemuxBus2_i0 (
    .sel( s1 ),
    .in( s0 ),
    .out_0( s2 ),
    .out_1( s3 ),
    .out_2( s4 ),
    .out_3( s5 )
  );
  assign s6 = (s2 | s5);
  assign s7 = (s3 | s5);
  assign s8 = (s4 | s5);
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i1 (
    .sel( de_i ),
    .in_0( 8'b0 ),
    .in_1( s6 ),
    .out( R )
  );
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i2 (
    .sel( de_i ),
    .in_0( 8'b0 ),
    .in_1( s7 ),
    .out( G )
  );
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i3 (
    .sel( de_i ),
    .in_0( 8'b0 ),
    .in_1( s8 ),
    .out( B )
  );
  assign X_o = X_i;
  assign Y_o = Y_i;
  assign nl_o = nl_i;
  assign nf_o = nf_i;
  assign hs_o = hs_i;
  assign vs_o = vs_i;
  assign de_o = de_i;
endmodule

module vdp (
  input clk,
  input rst,
  input [11:0] hfp,
  input [11:0] hsn,
  input [11:0] hbp,
  input [11:0] httl,
  input hneg,
  input [11:0] vfp,
  input [11:0] vsn,
  input [11:0] vbp,
  input [11:0] vttl,
  input vneg,
  output [7:0] R,
  output [7:0] G,
  output [7:0] B,
  output hs,
  output vs,
  output de,
  output [11:0] X,
  output [11:0] Y,
  output nl,
  output nf
);
  wire [11:0] s0;
  wire [11:0] s1;
  wire [11:0] s2;
  wire [11:0] s3;
  wire s4;
  wire s5;
  wire [11:0] s6;
  wire [11:0] s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  scanxy scanxy_i0 (
    .C( clk ),
    .rst( rst ),
    .en( 1'b1 ),
    .hr( httl ),
    .vr( vttl ),
    .nx( s0 ),
    .ny( s1 ),
    .x( s2 ),
    .y( s3 ),
    .nl( s4 ),
    .nf( s5 )
  );
  vgasync vgasync_i1 (
    .clk( clk ),
    .rst( rst ),
    .nx( s0 ),
    .ny( s1 ),
    .x_i( s2 ),
    .y_i( s3 ),
    .nl_i( s4 ),
    .nf_i( s5 ),
    .hfp( hfp ),
    .hsn( hsn ),
    .hbp( hbp ),
    .hneg( hneg ),
    .vfp( vfp ),
    .vsn( vsn ),
    .vbp( vbp ),
    .vneg( vneg ),
    .x_o( s6 ),
    .y_o( s7 ),
    .nl_o( s8 ),
    .nf_o( s9 ),
    .hs( s10 ),
    .vs( s11 ),
    .de( s12 )
  );
  engine engine_i2 (
    .clk( clk ),
    .rst( rst ),
    .X_i( s6 ),
    .Y_i( s7 ),
    .nl_i( s8 ),
    .nf_i( s9 ),
    .hs_i( s10 ),
    .vs_i( s11 ),
    .de_i( s12 ),
    .X_o( X ),
    .Y_o( Y ),
    .nl_o( nl ),
    .nf_o( nf ),
    .R( R ),
    .G( G ),
    .B( B ),
    .hs_o( hs ),
    .vs_o( vs ),
    .de_o( de )
  );
endmodule
