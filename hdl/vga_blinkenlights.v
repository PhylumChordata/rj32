/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_Sub #(
    parameter Bits = 2
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits-1):0] s,
    output c_o
);
    wire [Bits:0] temp;

    assign temp = a - b - c_i;
    assign s = temp[(Bits-1):0];
    assign c_o = temp[Bits];
endmodule


module DIG_CounterPreset #(
    parameter Bits = 2,
    parameter maxValue = 4
)
(
    input C,
    input en,
    input clr,
    input dir,
    input [(Bits-1):0] in,
    input ld,
    output [(Bits-1):0] out,
    output ovf
);

    reg [(Bits-1):0] count = 'h0;

    function [(Bits-1):0] maxVal (input [(Bits-1):0] maxv);
        if (maxv == 0)
            maxVal = (1 << Bits) - 1;
        else
            maxVal = maxv;
    endfunction

    assign out = count;
    assign ovf = ((count == maxVal(maxValue) & dir == 1'b0)
                  | (count == 'b0 & dir == 1'b1))? en : 1'b0;

    always @ (posedge C) begin
        if (clr == 1'b1)
            count <= 'h0;
        else if (ld == 1'b1)
            count <= in;
        else if (en == 1'b1) begin
            if (dir == 1'b0) begin
                if (count == maxVal(maxValue))
                    count <= 'h0;
                else
                    count <= count + 1'b1;
            end
            else begin
                if (count == 'h0)
                    count <= maxVal(maxValue);
                else
                    count <= count - 1;
            end
        end
    end
endmodule


module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule

module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module vga_timing (
  input en,
  input clock,
  input [11:0] res,
  input [11:0] fp,
  input [11:0] sync,
  input [11:0] bp,
  input neg,
  output [11:0] V,
  output pulse,
  output next
);
  wire [11:0] s0;
  wire next_temp;
  wire [11:0] V_temp;
  wire [11:0] s1;
  wire [11:0] s2;
  wire [11:0] s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  DIG_Sub #(
    .Bits(12)
  )
  DIG_Sub_i0 (
    .a( res ),
    .b( 12'b1 ),
    .c_i( 1'b0 ),
    .s( s1 )
  );
  DIG_Sub #(
    .Bits(12)
  )
  DIG_Sub_i1 (
    .a( 12'b0 ),
    .b( bp ),
    .c_i( 1'b0 ),
    .s( s2 )
  );
  DIG_Sub #(
    .Bits(12)
  )
  DIG_Sub_i2 (
    .a( s2 ),
    .b( sync ),
    .c_i( 1'b0 ),
    .s( s3 )
  );
  DIG_Sub #(
    .Bits(12)
  )
  DIG_Sub_i3 (
    .a( s3 ),
    .b( fp ),
    .c_i( 1'b0 ),
    .s( s0 )
  );
  DIG_CounterPreset #(
    .Bits(12),
    .maxValue(0)
  )
  DIG_CounterPreset_i4 (
    .en( en ),
    .C( clock ),
    .dir( 1'b0 ),
    .in( s0 ),
    .ld( next_temp ),
    .clr( 1'b0 ),
    .out( V_temp )
  );
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i5 (
    .a( V_temp ),
    .b( s1 ),
    .\= ( next_temp )
  );
  assign pulse = (s4 ^ neg);
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i6 (
    .a( V_temp ),
    .b( s2 ),
    .\= ( s5 )
  );
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i7 (
    .a( V_temp ),
    .b( s3 ),
    .\= ( s6 )
  );
  assign s7 = (~ s5 & (s6 | s4));
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i8 (
    .D( s7 ),
    .C( clock ),
    .Q( s4 )
  );
  assign V = V_temp;
  assign next = next_temp;
endmodule

module vga_sync (
  input clock,
  input [11:0] res_H,
  input [11:0] fp_H,
  input [11:0] sync_H,
  input [11:0] bp_H,
  input neg_H,
  input [11:0] res_V,
  input [11:0] fp_V,
  input [11:0] sync_V,
  input [11:0] bp_V,
  input neg_V,
  output H,
  output V,
  output pic,
  output [11:0] X,
  output [11:0] Y,
  output vblank,
  output hblank
);
  wire [11:0] X_temp;
  wire s0;
  wire [11:0] Y_temp;
  wire s1;
  wire s2;
  // Horiz
  vga_timing vga_timing_i0 (
    .en( 1'b1 ),
    .clock( clock ),
    .res( res_H ),
    .fp( bp_H ),
    .sync( sync_H ),
    .bp( fp_H ),
    .neg( neg_H ),
    .V( X_temp ),
    .pulse( H ),
    .next( s0 )
  );
  // Vert
  vga_timing vga_timing_i1 (
    .en( s0 ),
    .clock( clock ),
    .res( res_V ),
    .fp( bp_V ),
    .sync( sync_V ),
    .bp( fp_V ),
    .neg( neg_V ),
    .V( Y_temp ),
    .pulse( V )
  );
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i2 (
    .a( X_temp ),
    .b( res_H ),
    .\< ( s1 )
  );
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i3 (
    .a( Y_temp ),
    .b( res_V ),
    .\< ( s2 )
  );
  assign hblank = ~ s1;
  assign pic = (s1 & s2);
  assign vblank = ~ s2;
  assign X = X_temp;
  assign Y = Y_temp;
endmodule
module DIG_BitExtender #(
    parameter inputBits = 2,
    parameter outputBits = 4
)
(
    input [(inputBits-1):0] in,
    output [(outputBits - 1):0] out
);
    assign out = {{(outputBits - inputBits){in[inputBits - 1]}}, in};
endmodule




module vga_charpos (
  input [11:0] X,
  input [11:0] Y,
  output [4:0] row,
  output [3:0] col,
  output [7:0] CX,
  output [7:0] CY
);
  wire [12:0] s0;
  DIG_BitExtender #(
    .inputBits(12),
    .outputBits(13)
  )
  DIG_BitExtender_i0 (
    .in( Y ),
    .out( s0 )
  );
  assign col = X[3:0];
  assign CX = X[11:4];
  assign row = s0[4:0];
  assign CY = s0[12:5];
endmodule
module DIG_D_FF_Nbit
#(
    parameter Bits = 2,
    parameter Default = 0
)
(
   input [(Bits-1):0] D,
   input C,
   output [(Bits-1):0] Q,
   output [(Bits-1):0] \~Q
);
    reg [(Bits-1):0] state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module Mux_8x1_NBits #(
    parameter Bits = 2
)
(
    input [2:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            3'h0: out = in_0;
            3'h1: out = in_1;
            3'h2: out = in_2;
            3'h3: out = in_3;
            3'h4: out = in_4;
            3'h5: out = in_5;
            3'h6: out = in_6;
            3'h7: out = in_7;
            default:
                out = 'h0;
        endcase
    end
endmodule

module DIG_ROM_64X16_PalletROM (
    input [5:0] A,
    input sel,
    output reg [15:0] D
);
    reg [15:0] my_rom [0:31];

    always @ (*) begin
        if (~sel)
            D = 16'hz;
        else if (A > 6'h1f)
            D = 16'h0;
        else
            D = my_rom[A];
    end

    initial begin
        my_rom[0] = 16'h0;
        my_rom[1] = 16'h0;
        my_rom[2] = 16'h0;
        my_rom[3] = 16'h0;
        my_rom[4] = 16'h0;
        my_rom[5] = 16'hf144;
        my_rom[6] = 16'hf1aa;
        my_rom[7] = 16'hf0ee;
        my_rom[8] = 16'h0;
        my_rom[9] = 16'hf124;
        my_rom[10] = 16'hf15a;
        my_rom[11] = 16'hf07e;
        my_rom[12] = 16'h0;
        my_rom[13] = 16'hf420;
        my_rom[14] = 16'hfa50;
        my_rom[15] = 16'hfe70;
        my_rom[16] = 16'h0;
        my_rom[17] = 16'hf412;
        my_rom[18] = 16'hfa15;
        my_rom[19] = 16'hfe07;
        my_rom[20] = 16'h0;
        my_rom[21] = 16'hf214;
        my_rom[22] = 16'hf51a;
        my_rom[23] = 16'hf70e;
        my_rom[24] = 16'h0;
        my_rom[25] = 16'hf241;
        my_rom[26] = 16'hf5a1;
        my_rom[27] = 16'hf7e0;
        my_rom[28] = 16'h0;
        my_rom[29] = 16'hf555;
        my_rom[30] = 16'hfbbb;
        my_rom[31] = 16'hffff;
    end
endmodule


module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module vga_text (
  input H_i,
  input V_i,
  input pic,
  input [4:0] row,
  input [3:0] col,
  input [15:0] TD,
  input [7:0] MD,
  input clock,
  input [6:0] char,
  input [3:0] fg,
  input [11:0] bg,
  output [3:0] R,
  output [3:0] G,
  output [3:0] B,
  output hs,
  output vs,
  output de,
  output [10:0] TA,
  output [9:0] MA
);
  wire [6:0] s0;
  wire [5:0] s1;
  wire [2:0] s2;
  wire [1:0] s3;
  wire [1:0] s4;
  wire [1:0] s5;
  wire [1:0] s6;
  wire [1:0] s7;
  wire [1:0] s8;
  wire [1:0] s9;
  wire [1:0] s10;
  wire [1:0] s11;
  wire s12;
  wire [11:0] s13;
  wire [11:0] s14;
  wire [3:0] s15;
  wire [3:0] s16;
  wire [3:0] s17;
  wire [2:0] s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire [11:0] s24;
  wire [11:0] s25;
  wire s26;
  wire s27;
  wire [3:0] s28;
  wire [4:0] s29;
  wire s30;
  wire [11:0] s31;
  wire [3:0] s32;
  wire [3:0] s33;
  wire [5:0] s34;
  wire [15:0] s35;
  wire [11:0] s36;
  wire [3:0] s37;
  wire [2:0] s38;
  wire s39;
  wire [3:0] s40;
  wire [2:0] s41;
  wire [2:0] s42;
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( H_i ),
    .C( clock ),
    .Q( s26 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i1 (
    .D( V_i ),
    .C( clock ),
    .Q( s27 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i2 (
    .D( col ),
    .C( clock ),
    .Q( s28 )
  );
  DIG_D_FF_Nbit #(
    .Bits(5),
    .Default(0)
  )
  DIG_D_FF_Nbit_i3 (
    .D( row ),
    .C( clock ),
    .Q( s29 )
  );
  DIG_D_FF_Nbit #(
    .Bits(7),
    .Default(0)
  )
  DIG_D_FF_Nbit_i4 (
    .D( char ),
    .C( clock ),
    .Q( s0 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i5 (
    .D( pic ),
    .C( clock ),
    .Q( s30 )
  );
  DIG_D_FF_Nbit #(
    .Bits(12),
    .Default(0)
  )
  DIG_D_FF_Nbit_i6 (
    .D( bg ),
    .C( clock ),
    .Q( s31 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i7 (
    .D( fg ),
    .C( clock ),
    .Q( s32 )
  );
  assign s3 = TD[1:0];
  assign s4 = TD[3:2];
  assign s5 = TD[5:4];
  assign s6 = TD[7:6];
  assign s7 = TD[9:8];
  assign s8 = TD[11:10];
  assign s9 = TD[13:12];
  assign s10 = TD[15:14];
  assign s1[4:0] = s0[4:0];
  assign s1[5] = s0[6];
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i8 (
    .D( s26 ),
    .C( clock ),
    .Q( s19 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i9 (
    .D( s27 ),
    .C( clock ),
    .Q( s21 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i10 (
    .D( s30 ),
    .C( clock ),
    .Q( s23 )
  );
  DIG_D_FF_Nbit #(
    .Bits(12),
    .Default(0)
  )
  DIG_D_FF_Nbit_i11 (
    .D( s31 ),
    .C( clock ),
    .Q( s24 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i12 (
    .D( s32 ),
    .C( clock ),
    .Q( s40 )
  );
  assign s38 = s28[2:0];
  assign s41 = s29[2:0];
  assign MA[0] = s28[3];
  assign MA[2:1] = s29[4:3];
  assign MA[8:3] = s1;
  assign MA[9] = 1'b0;
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i13 (
    .D( s19 ),
    .C( clock ),
    .Q( s20 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i14 (
    .D( s21 ),
    .C( clock ),
    .Q( s22 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i15 (
    .D( s23 ),
    .C( clock ),
    .Q( s12 )
  );
  DIG_D_FF_Nbit #(
    .Bits(12),
    .Default(0)
  )
  DIG_D_FF_Nbit_i16 (
    .D( s24 ),
    .C( clock ),
    .Q( s25 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i17 (
    .D( s40 ),
    .C( clock ),
    .Q( s33 )
  );
  DIG_D_FF_Nbit #(
    .Bits(3),
    .Default(0)
  )
  DIG_D_FF_Nbit_i18 (
    .D( s38 ),
    .C( clock ),
    .Q( s18 )
  );
  DIG_D_FF_Nbit #(
    .Bits(3),
    .Default(0)
  )
  DIG_D_FF_Nbit_i19 (
    .D( s41 ),
    .C( clock ),
    .Q( s42 )
  );
  DIG_D_FF_Nbit #(
    .Bits(3),
    .Default(0)
  )
  DIG_D_FF_Nbit_i20 (
    .D( s18 ),
    .C( clock ),
    .Q( s2 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i21 (
    .D( s22 ),
    .C( clock ),
    .Q( vs )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i22 (
    .D( s20 ),
    .C( clock ),
    .Q( hs )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i23 (
    .D( s12 ),
    .C( clock ),
    .Q( de )
  );
  assign TA[2:0] = s42;
  assign TA[10:3] = MD;
  Mux_8x1_NBits #(
    .Bits(2)
  )
  Mux_8x1_NBits_i24 (
    .sel( s2 ),
    .in_0( s3 ),
    .in_1( s4 ),
    .in_2( s5 ),
    .in_3( s6 ),
    .in_4( s7 ),
    .in_5( s8 ),
    .in_6( s9 ),
    .in_7( s10 ),
    .out( s11 )
  );
  assign s34[1:0] = s11;
  assign s34[5:2] = s33;
  // Pallet ROM
  DIG_ROM_64X16_PalletROM DIG_ROM_64X16_PalletROM_i25 (
    .A( s34 ),
    .sel( 1'b1 ),
    .D( s35 )
  );
  assign s36 = s35[11:0];
  assign s37 = s35[15:12];
  // transparent?
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i26 (
    .a( s37 ),
    .b( 4'b0 ),
    .\= ( s39 )
  );
  Mux_2x1_NBits #(
    .Bits(12)
  )
  Mux_2x1_NBits_i27 (
    .sel( s39 ),
    .in_0( s36 ),
    .in_1( s25 ),
    .out( s13 )
  );
  Mux_2x1_NBits #(
    .Bits(12)
  )
  Mux_2x1_NBits_i28 (
    .sel( s12 ),
    .in_0( 12'b0 ),
    .in_1( s13 ),
    .out( s14 )
  );
  assign s15 = s14[3:0];
  assign s16 = s14[7:4];
  assign s17 = s14[11:8];
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i29 (
    .D( s15 ),
    .C( clock ),
    .Q( B )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i30 (
    .D( s16 ),
    .C( clock ),
    .Q( G )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i31 (
    .D( s17 ),
    .C( clock ),
    .Q( R )
  );
endmodule

module vga_display (
  input clock,
  input [11:0] res_H,
  input [11:0] fp_H,
  input [11:0] sync_H,
  input [11:0] bp_H,
  input neg_H,
  input [11:0] res_V,
  input [11:0] fp_V,
  input [11:0] sync_V,
  input [11:0] bp_V,
  input neg_V,
  input [6:0] char,
  input [3:0] fg,
  input [11:0] bg,
  input [15:0] TD,
  input [7:0] MD,
  output [3:0] R,
  output [3:0] G,
  output [3:0] B,
  output hs,
  output vs,
  output de,
  output [7:0] CX,
  output [7:0] CY,
  output vblank,
  output hblank,
  output [10:0] TA,
  output [9:0] MA
);
  wire s0;
  wire s1;
  wire s2;
  wire [11:0] s3;
  wire [11:0] s4;
  wire [4:0] s5;
  wire [3:0] s6;
  vga_sync vga_sync_i0 (
    .clock( clock ),
    .res_H( res_H ),
    .fp_H( bp_H ),
    .sync_H( sync_H ),
    .bp_H( fp_H ),
    .neg_H( neg_H ),
    .res_V( res_V ),
    .fp_V( bp_V ),
    .sync_V( sync_V ),
    .bp_V( fp_V ),
    .neg_V( neg_V ),
    .H( s0 ),
    .V( s1 ),
    .pic( s2 ),
    .X( s3 ),
    .Y( s4 ),
    .vblank( vblank ),
    .hblank( hblank )
  );
  vga_charpos vga_charpos_i1 (
    .X( s3 ),
    .Y( s4 ),
    .row( s5 ),
    .col( s6 ),
    .CX( CX ),
    .CY( CY )
  );
  vga_text vga_text_i2 (
    .H_i( s0 ),
    .V_i( s1 ),
    .pic( s2 ),
    .row( s5 ),
    .col( s6 ),
    .TD( TD ),
    .MD( MD ),
    .clock( clock ),
    .char( char ),
    .fg( fg ),
    .bg( bg ),
    .R( R ),
    .G( G ),
    .B( B ),
    .hs( hs ),
    .vs( vs ),
    .de( de ),
    .TA( TA ),
    .MA( MA )
  );
endmodule

module DIG_Register_BUS #(
    parameter Bits = 1
)
(
    input C,
    input en,
    input [(Bits - 1):0]D,
    output [(Bits - 1):0]Q
);

    reg [(Bits - 1):0] state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module Demux3
(
    output out_0,
    output out_1,
    output out_2,
    output out_3,
    output out_4,
    output out_5,
    output out_6,
    output out_7,
    input [2:0] sel,
    input in
);
    assign out_0 = (sel == 3'h0)? in : 'd0;
    assign out_1 = (sel == 3'h1)? in : 'd0;
    assign out_2 = (sel == 3'h2)? in : 'd0;
    assign out_3 = (sel == 3'h3)? in : 'd0;
    assign out_4 = (sel == 3'h4)? in : 'd0;
    assign out_5 = (sel == 3'h5)? in : 'd0;
    assign out_6 = (sel == 3'h6)? in : 'd0;
    assign out_7 = (sel == 3'h7)? in : 'd0;
endmodule


module debugregcopy (
  input [25:0] db,
  input [4:0] b,
  input e,
  output [15:0] o0,
  output [15:0] o1,
  output [15:0] o2,
  output [15:0] o3,
  output [15:0] o4,
  output [15:0] o5,
  output [15:0] o6,
  output [15:0] o7
);
  wire [15:0] s0;
  wire [2:0] s1;
  wire [4:0] s2;
  wire C;
  wire s3;
  wire [15:0] s4;
  wire s5;
  wire [15:0] s6;
  wire s7;
  wire [15:0] s8;
  wire s9;
  wire [15:0] s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire [15:0] s17;
  wire [15:0] s18;
  wire [15:0] s19;
  wire [15:0] s20;
  assign s0 = db[15:0];
  assign s1 = db[19:17];
  assign s2 = db[24:20];
  assign C = db[25];
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i0 (
    .a( s2 ),
    .b( b ),
    .\= ( s16 )
  );
  assign s15 = (s16 & db[16]);
  Demux3 Demux3_i1 (
    .sel( s1 ),
    .in( s15 ),
    .out_0( s3 ),
    .out_1( s5 ),
    .out_2( s7 ),
    .out_3( s9 ),
    .out_4( s11 ),
    .out_5( s12 ),
    .out_6( s13 ),
    .out_7( s14 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i2 (
    .D( s0 ),
    .C( C ),
    .en( s3 ),
    .Q( s4 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i3 (
    .D( s0 ),
    .C( C ),
    .en( s5 ),
    .Q( s6 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i4 (
    .D( s0 ),
    .C( C ),
    .en( s7 ),
    .Q( s8 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i5 (
    .D( s0 ),
    .C( C ),
    .en( s9 ),
    .Q( s10 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i6 (
    .D( s0 ),
    .C( C ),
    .en( s11 ),
    .Q( s17 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i7 (
    .D( s0 ),
    .C( C ),
    .en( s12 ),
    .Q( s18 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i8 (
    .D( s0 ),
    .C( C ),
    .en( s13 ),
    .Q( s19 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i9 (
    .D( s0 ),
    .C( C ),
    .en( s14 ),
    .Q( s20 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i10 (
    .D( s4 ),
    .C( C ),
    .en( e ),
    .Q( o0 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i11 (
    .D( s6 ),
    .C( C ),
    .en( e ),
    .Q( o1 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i12 (
    .D( s8 ),
    .C( C ),
    .en( e ),
    .Q( o2 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i13 (
    .D( s10 ),
    .C( C ),
    .en( e ),
    .Q( o3 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i14 (
    .D( s17 ),
    .C( C ),
    .en( e ),
    .Q( o4 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i15 (
    .D( s18 ),
    .C( C ),
    .en( e ),
    .Q( o5 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i16 (
    .D( s19 ),
    .C( C ),
    .en( e ),
    .Q( o6 )
  );
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i17 (
    .D( s20 ),
    .C( C ),
    .en( e ),
    .Q( o7 )
  );
endmodule

module debugcopy (
  input [25:0] db,
  input clock,
  input e,
  output [15:0] R0,
  output [15:0] R1,
  output [15:0] R2,
  output [15:0] R3,
  output [15:0] decode,
  output [15:0] ctrl,
  output [15:0] L,
  output [15:0] R,
  output [15:0] result,
  output [15:0] imm,
  output [15:0] pc
);
  wire [24:0] s0;
  wire s1;
  wire [24:0] s2;
  wire [24:0] s3;
  wire [24:0] s4;
  wire [25:0] s5;
  wire [25:0] s6;
  assign s0 = db[24:0];
  assign s1 = db[25];
  DIG_Register_BUS #(
    .Bits(25)
  )
  DIG_Register_BUS_i0 (
    .D( s0 ),
    .C( s1 ),
    .en( 1'b1 ),
    .Q( s2 )
  );
  DIG_Register_BUS #(
    .Bits(25)
  )
  DIG_Register_BUS_i1 (
    .D( s2 ),
    .C( clock ),
    .en( 1'b1 ),
    .Q( s3 )
  );
  DIG_Register_BUS #(
    .Bits(25)
  )
  DIG_Register_BUS_i2 (
    .D( s3 ),
    .C( clock ),
    .en( 1'b1 ),
    .Q( s4 )
  );
  assign s5[24:0] = s4;
  assign s5[25] = clock;
  assign s6[24:0] = s4;
  assign s6[25] = clock;
  debugregcopy debugregcopy_i3 (
    .db( s5 ),
    .b( 5'b0 ),
    .e( e ),
    .o0( R0 ),
    .o1( R1 ),
    .o2( R2 ),
    .o3( R3 )
  );
  debugregcopy debugregcopy_i4 (
    .db( s6 ),
    .b( 5'b10 ),
    .e( e ),
    .o0( decode ),
    .o1( ctrl ),
    .o2( L ),
    .o3( R ),
    .o5( result ),
    .o6( imm ),
    .o7( pc )
  );
endmodule

module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module vga_string (
  input [7:0] CX_i,
  input [7:0] CY_i,
  input [6:0] C_i,
  input [3:0] fg_i,
  input [3:0] fg_c,
  input [5:0] CX_c,
  input [7:0] CY_c,
  input [6:0] C_0,
  input [6:0] C_1,
  input [6:0] C_2,
  input [6:0] C_3,
  input en,
  output [7:0] CX_o,
  output [7:0] CY_o,
  output [6:0] C_o,
  output [3:0] fg_o
);
  wire s0;
  wire [6:0] s1;
  wire [5:0] s2;
  wire s3;
  wire s4;
  wire [1:0] s5;
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i0 (
    .a( CY_i ),
    .b( CY_c ),
    .\= ( s4 )
  );
  assign s5 = CX_i[1:0];
  assign s2 = CX_i[7:2];
  CompUnsigned #(
    .Bits(6)
  )
  CompUnsigned_i1 (
    .a( s2 ),
    .b( CX_c ),
    .\= ( s3 )
  );
  Mux_4x1_NBits #(
    .Bits(7)
  )
  Mux_4x1_NBits_i2 (
    .sel( s5 ),
    .in_0( C_0 ),
    .in_1( C_1 ),
    .in_2( C_2 ),
    .in_3( C_3 ),
    .out( s1 )
  );
  assign s0 = (s3 & en & s4);
  Mux_2x1_NBits #(
    .Bits(7)
  )
  Mux_2x1_NBits_i3 (
    .sel( s0 ),
    .in_0( C_i ),
    .in_1( s1 ),
    .out( C_o )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i4 (
    .sel( s0 ),
    .in_0( fg_i ),
    .in_1( fg_c ),
    .out( fg_o )
  );
  assign CX_o = CX_i;
  assign CY_o = CY_i;
endmodule

module Mux_16x1_NBits #(
    parameter Bits = 2
)
(
    input [3:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    input [(Bits - 1):0] in_8,
    input [(Bits - 1):0] in_9,
    input [(Bits - 1):0] in_10,
    input [(Bits - 1):0] in_11,
    input [(Bits - 1):0] in_12,
    input [(Bits - 1):0] in_13,
    input [(Bits - 1):0] in_14,
    input [(Bits - 1):0] in_15,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            4'h0: out = in_0;
            4'h1: out = in_1;
            4'h2: out = in_2;
            4'h3: out = in_3;
            4'h4: out = in_4;
            4'h5: out = in_5;
            4'h6: out = in_6;
            4'h7: out = in_7;
            4'h8: out = in_8;
            4'h9: out = in_9;
            4'ha: out = in_10;
            4'hb: out = in_11;
            4'hc: out = in_12;
            4'hd: out = in_13;
            4'he: out = in_14;
            4'hf: out = in_15;
            default:
                out = 'h0;
        endcase
    end
endmodule


module digit2ascii (
  input [3:0] D,
  output [6:0] A
);
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i0 (
    .sel( D ),
    .in_0( 7'b110000 ),
    .in_1( 7'b110001 ),
    .in_2( 7'b110010 ),
    .in_3( 7'b110011 ),
    .in_4( 7'b110100 ),
    .in_5( 7'b110101 ),
    .in_6( 7'b110110 ),
    .in_7( 7'b110111 ),
    .in_8( 7'b111000 ),
    .in_9( 7'b111001 ),
    .in_10( 7'b1000001 ),
    .in_11( 7'b1000010 ),
    .in_12( 7'b1000011 ),
    .in_13( 7'b1000100 ),
    .in_14( 7'b1000101 ),
    .in_15( 7'b1000110 ),
    .out( A )
  );
endmodule

module digit2asciiskip (
  input [3:0] i,
  input s_i,
  output [6:0] a,
  output s_o
);
  wire [6:0] s0;
  wire s_o_temp;
  digit2ascii digit2ascii_i0 (
    .D( i ),
    .A( s0 )
  );
  assign s_o_temp = (s_i | i[0] | i[1] | i[2] | i[3]);
  Mux_2x1_NBits #(
    .Bits(7)
  )
  Mux_2x1_NBits_i1 (
    .sel( s_o_temp ),
    .in_0( 7'b100000 ),
    .in_1( s0 ),
    .out( a )
  );
  assign s_o = s_o_temp;
endmodule

module bcd2ascii (
  input [19:0] N,
  output [6:0] d4,
  output [6:0] d3,
  output [6:0] d2,
  output [6:0] d1,
  output [6:0] d0
);
  wire [3:0] s0;
  wire [3:0] s1;
  wire [3:0] s2;
  wire [3:0] s3;
  wire [3:0] s4;
  wire s5;
  wire s6;
  wire s7;
  assign s0 = N[3:0];
  assign s1 = N[7:4];
  assign s2 = N[11:8];
  assign s3 = N[15:12];
  assign s4 = N[19:16];
  digit2asciiskip digit2asciiskip_i0 (
    .i( s4 ),
    .s_i( 1'b0 ),
    .a( d4 ),
    .s_o( s5 )
  );
  digit2ascii digit2ascii_i1 (
    .D( s0 ),
    .A( d0 )
  );
  digit2asciiskip digit2asciiskip_i2 (
    .i( s3 ),
    .s_i( s5 ),
    .a( d3 ),
    .s_o( s6 )
  );
  digit2asciiskip digit2asciiskip_i3 (
    .i( s2 ),
    .s_i( s6 ),
    .a( d2 ),
    .s_o( s7 )
  );
  digit2asciiskip digit2asciiskip_i4 (
    .i( s1 ),
    .s_i( s7 ),
    .a( d1 )
  );
endmodule

module vga_hex (
  input [7:0] CX_i,
  input [7:0] CY_i,
  input [6:0] C_i,
  input [3:0] fg_i,
  input [3:0] fg_c,
  input [5:0] CX_c,
  input [7:0] CY_c,
  input [15:0] N,
  input en,
  output [7:0] CX_o,
  output [7:0] CY_o,
  output [6:0] C_o,
  output [3:0] fg_o
);
  wire [6:0] s0;
  wire [6:0] s1;
  wire [6:0] s2;
  wire [6:0] s3;
  wire [19:0] s4;
  assign s4[15:0] = N;
  assign s4[19:16] = 4'b0;
  bcd2ascii bcd2ascii_i0 (
    .N( s4 ),
    .d3( s0 ),
    .d2( s1 ),
    .d1( s2 ),
    .d0( s3 )
  );
  vga_string vga_string_i1 (
    .CX_i( CX_i ),
    .CY_i( CY_i ),
    .C_i( C_i ),
    .fg_i( fg_i ),
    .fg_c( fg_c ),
    .CX_c( CX_c ),
    .CY_c( CY_c ),
    .C_0( s0 ),
    .C_1( s1 ),
    .C_2( s2 ),
    .C_3( s3 ),
    .en( en ),
    .CX_o( CX_o ),
    .CY_o( CY_o ),
    .C_o( C_o ),
    .fg_o( fg_o )
  );
endmodule

module vga_labelnum (
  input [7:0] CX_i,
  input [7:0] CY_i,
  input [6:0] C_i,
  input [3:0] fg_i,
  input [3:0] fg_lab,
  input [3:0] fg_num,
  input [4:0] CX_c,
  input [7:0] CY_c,
  input en,
  input [6:0] L_0,
  input [6:0] L_1,
  input [6:0] L_2,
  input [15:0] N,
  output [7:0] CX_o,
  output [7:0] CY_o,
  output [6:0] C_o,
  output [3:0] fg_o
);
  wire [5:0] s0;
  wire [7:0] s1;
  wire [7:0] s2;
  wire [6:0] s3;
  wire [3:0] s4;
  wire [5:0] s5;
  assign s0[0] = 1'b0;
  assign s0[5:1] = CX_c;
  assign s5[0] = 1'b1;
  assign s5[5:1] = CX_c;
  // Label
  vga_string vga_string_i0 (
    .CX_i( CX_i ),
    .CY_i( CY_i ),
    .C_i( C_i ),
    .fg_i( fg_i ),
    .fg_c( fg_lab ),
    .CX_c( s0 ),
    .CY_c( CY_c ),
    .C_0( L_0 ),
    .C_1( L_1 ),
    .C_2( L_2 ),
    .C_3( 7'b100000 ),
    .en( en ),
    .CX_o( s1 ),
    .CY_o( s2 ),
    .C_o( s3 ),
    .fg_o( s4 )
  );
  // Num
  vga_hex vga_hex_i1 (
    .CX_i( s1 ),
    .CY_i( s2 ),
    .C_i( s3 ),
    .fg_i( s4 ),
    .fg_c( fg_num ),
    .CX_c( s5 ),
    .CY_c( CY_c ),
    .N( N ),
    .en( en ),
    .CX_o( CX_o ),
    .CY_o( CY_o ),
    .C_o( C_o ),
    .fg_o( fg_o )
  );
endmodule

module ctrldec (
  input [15:0] ctrl,
  output stall,
  output skip,
  output halt,
  output error,
  output jump,
  output [2:0] aluop,
  output mem,
  output store,
  output write,
  output en_fetch,
  output en,
  output rdvalid,
  output rsvalid,
  output immv
);
  assign stall = ctrl[0];
  assign skip = ctrl[1];
  assign halt = ctrl[2];
  assign error = ctrl[3];
  assign jump = ctrl[4];
  assign aluop = ctrl[7:5];
  assign mem = ctrl[8];
  assign store = ctrl[9];
  assign write = ctrl[10];
  assign en_fetch = ctrl[11];
  assign en = ctrl[12];
  assign rdvalid = ctrl[13];
  assign rsvalid = ctrl[14];
  assign immv = ctrl[15];
endmodule

module decodedec (
  input [15:0] D,
  output [4:0] op,
  output [2:0] cond,
  output [3:0] rs,
  output [3:0] rd
);
  assign rd = D[3:0];
  assign rs = D[7:4];
  assign op = D[12:8];
  assign cond = D[15:13];
endmodule

module reg2ascii (
  input [3:0] R,
  input J,
  output [6:0] D_0,
  output [6:0] D_1,
  output [6:0] D_2
);
  wire [6:0] s0;
  wire [6:0] s1;
  wire [6:0] s2;
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i0 (
    .sel( R ),
    .in_0( 7'b110000 ),
    .in_1( 7'b110001 ),
    .in_2( 7'b110010 ),
    .in_3( 7'b110011 ),
    .in_4( 7'b110100 ),
    .in_5( 7'b110101 ),
    .in_6( 7'b110110 ),
    .in_7( 7'b110111 ),
    .in_8( 7'b111000 ),
    .in_9( 7'b111001 ),
    .in_10( 7'b110000 ),
    .in_11( 7'b110001 ),
    .in_12( 7'b110010 ),
    .in_13( 7'b110011 ),
    .in_14( 7'b110100 ),
    .in_15( 7'b110101 ),
    .out( s0 )
  );
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i1 (
    .sel( R ),
    .in_0( 7'b1010010 ),
    .in_1( 7'b1010010 ),
    .in_2( 7'b1010010 ),
    .in_3( 7'b1010010 ),
    .in_4( 7'b1010010 ),
    .in_5( 7'b1010010 ),
    .in_6( 7'b1010010 ),
    .in_7( 7'b1010010 ),
    .in_8( 7'b1010010 ),
    .in_9( 7'b1010010 ),
    .in_10( 7'b110001 ),
    .in_11( 7'b110001 ),
    .in_12( 7'b110001 ),
    .in_13( 7'b110001 ),
    .in_14( 7'b110001 ),
    .in_15( 7'b110001 ),
    .out( s1 )
  );
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i2 (
    .sel( R ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b100000 ),
    .in_3( 7'b100000 ),
    .in_4( 7'b100000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b1010010 ),
    .in_11( 7'b1010010 ),
    .in_12( 7'b1010010 ),
    .in_13( 7'b1010010 ),
    .in_14( 7'b1010010 ),
    .in_15( 7'b1010010 ),
    .out( s2 )
  );
  Mux_2x1_NBits #(
    .Bits(7)
  )
  Mux_2x1_NBits_i3 (
    .sel( J ),
    .in_0( s1 ),
    .in_1( 7'b1010000 ),
    .out( D_1 )
  );
  Mux_2x1_NBits #(
    .Bits(7)
  )
  Mux_2x1_NBits_i4 (
    .sel( J ),
    .in_0( s0 ),
    .in_1( 7'b1000011 ),
    .out( D_2 )
  );
  Mux_2x1_NBits #(
    .Bits(7)
  )
  Mux_2x1_NBits_i5 (
    .sel( J ),
    .in_0( s2 ),
    .in_1( 7'b100000 ),
    .out( D_0 )
  );
endmodule

module vga_regdisp (
  input [7:0] CX_i,
  input [7:0] CY_i,
  input [6:0] C_i,
  input [3:0] fg_i,
  input [3:0] fg_c,
  input [5:0] CX_c,
  input [7:0] CY_c,
  input en,
  input [3:0] R,
  input J,
  input [6:0] sep,
  output [7:0] CX_o,
  output [7:0] CY_o,
  output [6:0] C_o,
  output [3:0] fg_o
);
  wire [6:0] s0;
  wire [6:0] s1;
  wire [6:0] s2;
  reg2ascii reg2ascii_i0 (
    .R( R ),
    .J( J ),
    .D_0( s0 ),
    .D_1( s1 ),
    .D_2( s2 )
  );
  vga_string vga_string_i1 (
    .CX_i( CX_i ),
    .CY_i( CY_i ),
    .C_i( C_i ),
    .fg_i( fg_i ),
    .fg_c( fg_c ),
    .CX_c( CX_c ),
    .CY_c( CY_c ),
    .C_0( s0 ),
    .C_1( s1 ),
    .C_2( s2 ),
    .C_3( sep ),
    .en( en ),
    .CX_o( CX_o ),
    .CY_o( CY_o ),
    .C_o( C_o ),
    .fg_o( fg_o )
  );
endmodule

module Mux_16x1
(
    input [3:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    input in_4,
    input in_5,
    input in_6,
    input in_7,
    input in_8,
    input in_9,
    input in_10,
    input in_11,
    input in_12,
    input in_13,
    input in_14,
    input in_15,
    output reg out
);
    always @ (*) begin
        case (sel)
            4'h0: out = in_0;
            4'h1: out = in_1;
            4'h2: out = in_2;
            4'h3: out = in_3;
            4'h4: out = in_4;
            4'h5: out = in_5;
            4'h6: out = in_6;
            4'h7: out = in_7;
            4'h8: out = in_8;
            4'h9: out = in_9;
            4'ha: out = in_10;
            4'hb: out = in_11;
            4'hc: out = in_12;
            4'hd: out = in_13;
            4'he: out = in_14;
            4'hf: out = in_15;
            default:
                out = 'h0;
        endcase
    end
endmodule


module aluop2ascii (
  input [3:0] I,
  output [6:0] L0,
  output [6:0] L1,
  output [6:0] L2,
  output [6:0] L3,
  output L_v,
  output R_v,
  output res_v
);
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i0 (
    .sel( I ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b100000 ),
    .in_3( 7'b100000 ),
    .in_4( 7'b100000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b100000 ),
    .in_14( 7'b100000 ),
    .in_15( 7'b100000 ),
    .out( L0 )
  );
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i1 (
    .sel( I ),
    .in_0( 7'b100000 ),
    .in_1( 7'b101011 ),
    .in_2( 7'b111100 ),
    .in_3( 7'b101101 ),
    .in_4( 7'b111100 ),
    .in_5( 7'b1011110 ),
    .in_6( 7'b100110 ),
    .in_7( 7'b100001 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b100000 ),
    .in_14( 7'b100000 ),
    .in_15( 7'b100000 ),
    .out( L1 )
  );
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i2 (
    .sel( I ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b111110 ),
    .in_3( 7'b100000 ),
    .in_4( 7'b101101 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b100000 ),
    .in_14( 7'b100000 ),
    .in_15( 7'b100000 ),
    .out( L2 )
  );
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i3 (
    .sel( I ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b100000 ),
    .in_3( 7'b100000 ),
    .in_4( 7'b100000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b100000 ),
    .in_14( 7'b100000 ),
    .in_15( 7'b100000 ),
    .out( L3 )
  );
  Mux_16x1 Mux_16x1_i4 (
    .sel( I ),
    .in_0( 1'b0 ),
    .in_1( 1'b1 ),
    .in_2( 1'b1 ),
    .in_3( 1'b1 ),
    .in_4( 1'b0 ),
    .in_5( 1'b1 ),
    .in_6( 1'b1 ),
    .in_7( 1'b1 ),
    .in_8( 1'b0 ),
    .in_9( 1'b0 ),
    .in_10( 1'b0 ),
    .in_11( 1'b0 ),
    .in_12( 1'b0 ),
    .in_13( 1'b0 ),
    .in_14( 1'b0 ),
    .in_15( 1'b0 ),
    .out( L_v )
  );
  Mux_16x1 Mux_16x1_i5 (
    .sel( I ),
    .in_0( 1'b0 ),
    .in_1( 1'b1 ),
    .in_2( 1'b1 ),
    .in_3( 1'b1 ),
    .in_4( 1'b1 ),
    .in_5( 1'b1 ),
    .in_6( 1'b1 ),
    .in_7( 1'b1 ),
    .in_8( 1'b0 ),
    .in_9( 1'b0 ),
    .in_10( 1'b0 ),
    .in_11( 1'b0 ),
    .in_12( 1'b0 ),
    .in_13( 1'b0 ),
    .in_14( 1'b0 ),
    .in_15( 1'b0 ),
    .out( R_v )
  );
  Mux_16x1 Mux_16x1_i6 (
    .sel( I ),
    .in_0( 1'b0 ),
    .in_1( 1'b1 ),
    .in_2( 1'b0 ),
    .in_3( 1'b1 ),
    .in_4( 1'b1 ),
    .in_5( 1'b1 ),
    .in_6( 1'b1 ),
    .in_7( 1'b1 ),
    .in_8( 1'b0 ),
    .in_9( 1'b0 ),
    .in_10( 1'b0 ),
    .in_11( 1'b0 ),
    .in_12( 1'b0 ),
    .in_13( 1'b0 ),
    .in_14( 1'b0 ),
    .in_15( 1'b0 ),
    .out( res_v )
  );
endmodule

module vga_aluopdisp (
  input [7:0] CX_i,
  input [7:0] CY_i,
  input [6:0] C_i,
  input [3:0] fg_i,
  input [3:0] fg_c,
  input [5:0] CX_c,
  input [7:0] CY_c,
  input en,
  input [2:0] aop,
  output [7:0] CX_o,
  output [7:0] CY_o,
  output [6:0] C_o,
  output [3:0] fg_o,
  output L_v,
  output R_v,
  output res_v
);
  wire [6:0] s0;
  wire [6:0] s1;
  wire [6:0] s2;
  wire [6:0] s3;
  wire [3:0] s4;
  assign s4[2:0] = aop;
  assign s4[3] = 1'b0;
  aluop2ascii aluop2ascii_i0 (
    .I( s4 ),
    .L0( s0 ),
    .L1( s1 ),
    .L2( s2 ),
    .L3( s3 ),
    .L_v( L_v ),
    .R_v( R_v ),
    .res_v( res_v )
  );
  vga_string vga_string_i1 (
    .CX_i( CX_i ),
    .CY_i( CY_i ),
    .C_i( C_i ),
    .fg_i( fg_i ),
    .fg_c( fg_c ),
    .CX_c( CX_c ),
    .CY_c( CY_c ),
    .C_0( s0 ),
    .C_1( s1 ),
    .C_2( s2 ),
    .C_3( s3 ),
    .en( en ),
    .CX_o( CX_o ),
    .CY_o( CY_o ),
    .C_o( C_o ),
    .fg_o( fg_o )
  );
endmodule

module Mux_32x1_NBits #(
    parameter Bits = 2
)
(
    input [4:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    input [(Bits - 1):0] in_8,
    input [(Bits - 1):0] in_9,
    input [(Bits - 1):0] in_10,
    input [(Bits - 1):0] in_11,
    input [(Bits - 1):0] in_12,
    input [(Bits - 1):0] in_13,
    input [(Bits - 1):0] in_14,
    input [(Bits - 1):0] in_15,
    input [(Bits - 1):0] in_16,
    input [(Bits - 1):0] in_17,
    input [(Bits - 1):0] in_18,
    input [(Bits - 1):0] in_19,
    input [(Bits - 1):0] in_20,
    input [(Bits - 1):0] in_21,
    input [(Bits - 1):0] in_22,
    input [(Bits - 1):0] in_23,
    input [(Bits - 1):0] in_24,
    input [(Bits - 1):0] in_25,
    input [(Bits - 1):0] in_26,
    input [(Bits - 1):0] in_27,
    input [(Bits - 1):0] in_28,
    input [(Bits - 1):0] in_29,
    input [(Bits - 1):0] in_30,
    input [(Bits - 1):0] in_31,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            5'h0: out = in_0;
            5'h1: out = in_1;
            5'h2: out = in_2;
            5'h3: out = in_3;
            5'h4: out = in_4;
            5'h5: out = in_5;
            5'h6: out = in_6;
            5'h7: out = in_7;
            5'h8: out = in_8;
            5'h9: out = in_9;
            5'ha: out = in_10;
            5'hb: out = in_11;
            5'hc: out = in_12;
            5'hd: out = in_13;
            5'he: out = in_14;
            5'hf: out = in_15;
            5'h10: out = in_16;
            5'h11: out = in_17;
            5'h12: out = in_18;
            5'h13: out = in_19;
            5'h14: out = in_20;
            5'h15: out = in_21;
            5'h16: out = in_22;
            5'h17: out = in_23;
            5'h18: out = in_24;
            5'h19: out = in_25;
            5'h1a: out = in_26;
            5'h1b: out = in_27;
            5'h1c: out = in_28;
            5'h1d: out = in_29;
            5'h1e: out = in_30;
            5'h1f: out = in_31;
            default:
                out = 'h0;
        endcase
    end
endmodule


module op2ascii (
  input [4:0] I,
  input [2:0] C,
  output [6:0] L0,
  output [6:0] L1,
  output [6:0] L2,
  output [6:0] L3,
  output [6:0] L4,
  output [6:0] L5
);
  wire [6:0] s0;
  wire [6:0] s1;
  wire s2;
  wire [6:0] s3;
  wire [6:0] s4;
  Mux_32x1_NBits #(
    .Bits(7)
  )
  Mux_32x1_NBits_i0 (
    .sel( I ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b100000 ),
    .in_3( 7'b100000 ),
    .in_4( 7'b100000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b100000 ),
    .in_14( 7'b100000 ),
    .in_15( 7'b100000 ),
    .in_16( 7'b100000 ),
    .in_17( 7'b100000 ),
    .in_18( 7'b100000 ),
    .in_19( 7'b100000 ),
    .in_20( 7'b100000 ),
    .in_21( 7'b100000 ),
    .in_22( 7'b100000 ),
    .in_23( 7'b100000 ),
    .in_24( 7'b100000 ),
    .in_25( 7'b1001001 ),
    .in_26( 7'b100000 ),
    .in_27( 7'b100000 ),
    .in_28( 7'b100000 ),
    .in_29( 7'b100000 ),
    .in_30( 7'b100000 ),
    .in_31( 7'b100000 ),
    .out( L0 )
  );
  Mux_32x1_NBits #(
    .Bits(7)
  )
  Mux_32x1_NBits_i1 (
    .sel( I ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b1000101 ),
    .in_3( 7'b100000 ),
    .in_4( 7'b100000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b100000 ),
    .in_14( 7'b100000 ),
    .in_15( 7'b100000 ),
    .in_16( 7'b100000 ),
    .in_17( 7'b100000 ),
    .in_18( 7'b100000 ),
    .in_19( 7'b100000 ),
    .in_20( 7'b100000 ),
    .in_21( 7'b100000 ),
    .in_22( 7'b100000 ),
    .in_23( 7'b100000 ),
    .in_24( 7'b1001001 ),
    .in_25( 7'b1000110 ),
    .in_26( 7'b100000 ),
    .in_27( 7'b100000 ),
    .in_28( 7'b100000 ),
    .in_29( 7'b100000 ),
    .in_30( 7'b100000 ),
    .in_31( 7'b1010011 ),
    .out( L1 )
  );
  Mux_32x1_NBits #(
    .Bits(7)
  )
  Mux_32x1_NBits_i2 (
    .sel( I ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b1010010 ),
    .in_3( 7'b1001000 ),
    .in_4( 7'b100000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b100000 ),
    .in_14( 7'b100000 ),
    .in_15( 7'b100000 ),
    .in_16( 7'b100000 ),
    .in_17( 7'b100000 ),
    .in_18( 7'b100000 ),
    .in_19( 7'b100000 ),
    .in_20( 7'b100000 ),
    .in_21( 7'b100000 ),
    .in_22( 7'b1001101 ),
    .in_23( 7'b100000 ),
    .in_24( 7'b1000110 ),
    .in_25( 7'b1000011 ),
    .in_26( 7'b100000 ),
    .in_27( 7'b100000 ),
    .in_28( 7'b1001010 ),
    .in_29( 7'b100000 ),
    .in_30( 7'b1001100 ),
    .in_31( 7'b1010100 ),
    .out( L2 )
  );
  Mux_32x1_NBits #(
    .Bits(7)
  )
  Mux_32x1_NBits_i3 (
    .sel( I ),
    .in_0( 7'b1001110 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b1010010 ),
    .in_3( 7'b1000001 ),
    .in_4( 7'b100000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b100000 ),
    .in_14( 7'b100000 ),
    .in_15( 7'b100000 ),
    .in_16( 7'b1000001 ),
    .in_17( 7'b1010011 ),
    .in_18( 7'b1011000 ),
    .in_19( 7'b1000001 ),
    .in_20( 7'b100000 ),
    .in_21( 7'b100000 ),
    .in_22( 7'b1001111 ),
    .in_23( 7'b100000 ),
    .in_24( 7'b100000 ),
    .in_25( 7'b100000 ),
    .in_26( 7'b100000 ),
    .in_27( 7'b100000 ),
    .in_28( 7'b1010101 ),
    .in_29( 7'b100000 ),
    .in_30( 7'b1001111 ),
    .in_31( 7'b1001111 ),
    .out( L3 )
  );
  Mux_32x1_NBits #(
    .Bits(7)
  )
  Mux_32x1_NBits_i4 (
    .sel( I ),
    .in_0( 7'b1001111 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b1001111 ),
    .in_3( 7'b1001100 ),
    .in_4( 7'b100000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b100000 ),
    .in_14( 7'b100000 ),
    .in_15( 7'b100000 ),
    .in_16( 7'b1000100 ),
    .in_17( 7'b1010101 ),
    .in_18( 7'b1001111 ),
    .in_19( 7'b1001110 ),
    .in_20( 7'b1001111 ),
    .in_21( 7'b100000 ),
    .in_22( 7'b1010110 ),
    .in_23( 7'b100000 ),
    .in_24( 7'b100000 ),
    .in_25( 7'b100000 ),
    .in_26( 7'b100000 ),
    .in_27( 7'b100000 ),
    .in_28( 7'b1001101 ),
    .in_29( 7'b100000 ),
    .in_30( 7'b1000001 ),
    .in_31( 7'b1010010 ),
    .out( s0 )
  );
  Mux_32x1_NBits #(
    .Bits(7)
  )
  Mux_32x1_NBits_i5 (
    .sel( I ),
    .in_0( 7'b1010000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b1010010 ),
    .in_3( 7'b1010100 ),
    .in_4( 7'b100000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b100000 ),
    .in_14( 7'b100000 ),
    .in_15( 7'b100000 ),
    .in_16( 7'b1000100 ),
    .in_17( 7'b1000010 ),
    .in_18( 7'b1010010 ),
    .in_19( 7'b1000100 ),
    .in_20( 7'b1010010 ),
    .in_21( 7'b100000 ),
    .in_22( 7'b1000101 ),
    .in_23( 7'b100000 ),
    .in_24( 7'b100000 ),
    .in_25( 7'b100000 ),
    .in_26( 7'b100000 ),
    .in_27( 7'b100000 ),
    .in_28( 7'b1010000 ),
    .in_29( 7'b100000 ),
    .in_30( 7'b1000100 ),
    .in_31( 7'b1000101 ),
    .out( s1 )
  );
  Mux_8x1_NBits #(
    .Bits(7)
  )
  Mux_8x1_NBits_i6 (
    .sel( C ),
    .in_0( 7'b100000 ),
    .in_1( 7'b1000101 ),
    .in_2( 7'b1001110 ),
    .in_3( 7'b1001100 ),
    .in_4( 7'b1000111 ),
    .in_5( 7'b1001100 ),
    .in_6( 7'b1001000 ),
    .in_7( 7'b100000 ),
    .out( s3 )
  );
  Mux_8x1_NBits #(
    .Bits(7)
  )
  Mux_8x1_NBits_i7 (
    .sel( C ),
    .in_0( 7'b100000 ),
    .in_1( 7'b1010001 ),
    .in_2( 7'b1000101 ),
    .in_3( 7'b1010100 ),
    .in_4( 7'b1000101 ),
    .in_5( 7'b1001111 ),
    .in_6( 7'b1010011 ),
    .in_7( 7'b100000 ),
    .out( s4 )
  );
  assign s2 = (~ I[1] & ~ I[2] & I[3] & I[4]);
  Mux_2x1_NBits #(
    .Bits(7)
  )
  Mux_2x1_NBits_i8 (
    .sel( s2 ),
    .in_0( s0 ),
    .in_1( s3 ),
    .out( L4 )
  );
  Mux_2x1_NBits #(
    .Bits(7)
  )
  Mux_2x1_NBits_i9 (
    .sel( s2 ),
    .in_0( s1 ),
    .in_1( s4 ),
    .out( L5 )
  );
endmodule

module vga_opdisp (
  input [7:0] CX_i,
  input [7:0] CY_i,
  input [6:0] C_i,
  input [3:0] fg_i,
  input [3:0] fg_c,
  input [4:0] CX_c,
  input [7:0] CY_c,
  input en,
  input [4:0] op,
  input [2:0] cond,
  output [7:0] CX_o,
  output [7:0] CY_o,
  output [6:0] C_o,
  output [3:0] fg_o
);
  wire [5:0] s0;
  wire [6:0] s1;
  wire [6:0] s2;
  wire [6:0] s3;
  wire [7:0] s4;
  wire [7:0] s5;
  wire [6:0] s6;
  wire [3:0] s7;
  wire [5:0] s8;
  wire [6:0] s9;
  wire [6:0] s10;
  wire [6:0] s11;
  assign s0[0] = 1'b0;
  assign s0[5:1] = CX_c;
  assign s8[0] = 1'b1;
  assign s8[5:1] = CX_c;
  op2ascii op2ascii_i0 (
    .I( op ),
    .C( cond ),
    .L0( s1 ),
    .L1( s2 ),
    .L2( s3 ),
    .L3( s9 ),
    .L4( s10 ),
    .L5( s11 )
  );
  // H1
  vga_string vga_string_i1 (
    .CX_i( CX_i ),
    .CY_i( CY_i ),
    .C_i( C_i ),
    .fg_i( fg_i ),
    .fg_c( fg_c ),
    .CX_c( s0 ),
    .CY_c( CY_c ),
    .C_0( 7'b100000 ),
    .C_1( s1 ),
    .C_2( s2 ),
    .C_3( s3 ),
    .en( en ),
    .CX_o( s4 ),
    .CY_o( s5 ),
    .C_o( s6 ),
    .fg_o( s7 )
  );
  // H2
  vga_string vga_string_i2 (
    .CX_i( s4 ),
    .CY_i( s5 ),
    .C_i( s6 ),
    .fg_i( s7 ),
    .fg_c( fg_c ),
    .CX_c( s8 ),
    .CY_c( CY_c ),
    .C_0( s9 ),
    .C_1( s10 ),
    .C_2( s11 ),
    .C_3( 7'b100000 ),
    .en( en ),
    .CX_o( CX_o ),
    .CY_o( CY_o ),
    .C_o( C_o ),
    .fg_o( fg_o )
  );
endmodule

module vga_blinkenlights (
  input clock,
  input [25:0] db,
  input [15:0] TD,
  input [7:0] MD,
  output [3:0] R,
  output [3:0] G,
  output [3:0] B,
  output hs,
  output vs,
  output de,
  output [10:0] TA,
  output [9:0] MA
);
  wire [6:0] s0;
  wire [3:0] s1;
  wire [7:0] s2;
  wire [7:0] s3;
  wire vb;
  wire [15:0] PC_t;
  wire [7:0] s4;
  wire [7:0] s5;
  wire [6:0] s6;
  wire [3:0] s7;
  wire [15:0] R0_t;
  wire [7:0] s8;
  wire [7:0] s9;
  wire [6:0] s10;
  wire [3:0] s11;
  wire [15:0] R1_t;
  wire [7:0] s12;
  wire [7:0] s13;
  wire [6:0] s14;
  wire [3:0] s15;
  wire [15:0] R2_t;
  wire [7:0] s16;
  wire [7:0] s17;
  wire [6:0] s18;
  wire [3:0] s19;
  wire [15:0] R3_t;
  wire [7:0] s20;
  wire [7:0] s21;
  wire [6:0] s22;
  wire [3:0] s23;
  wire [7:0] s24;
  wire [7:0] s25;
  wire [6:0] s26;
  wire [3:0] s27;
  wire L_v;
  wire [15:0] L_t;
  wire [7:0] s28;
  wire [7:0] s29;
  wire [6:0] s30;
  wire [3:0] s31;
  wire [4:0] op_t;
  wire [2:0] cond_t;
  wire [7:0] s32;
  wire [7:0] s33;
  wire [6:0] s34;
  wire [3:0] s35;
  wire [7:0] s36;
  wire [7:0] s37;
  wire [6:0] s38;
  wire [3:0] s39;
  wire jump_t;
  wire [7:0] s40;
  wire [7:0] s41;
  wire [6:0] s42;
  wire [3:0] s43;
  wire skip_t;
  wire [7:0] s44;
  wire [7:0] s45;
  wire [6:0] s46;
  wire [3:0] s47;
  wire halt_t;
  wire [7:0] s48;
  wire [7:0] s49;
  wire [6:0] s50;
  wire [3:0] s51;
  wire error_t;
  wire [7:0] s52;
  wire [7:0] s53;
  wire [6:0] s54;
  wire [3:0] s55;
  wire rdv_t;
  wire [3:0] rd_t;
  wire [7:0] s56;
  wire [7:0] s57;
  wire [6:0] s58;
  wire [3:0] s59;
  wire rsv_t;
  wire [3:0] rs_t;
  wire [7:0] s60;
  wire [7:0] s61;
  wire [6:0] s62;
  wire [3:0] s63;
  wire [7:0] s64;
  wire [7:0] s65;
  wire [6:0] s66;
  wire [3:0] s67;
  wire [15:0] result_t;
  wire res_v;
  wire [7:0] s68;
  wire [7:0] s69;
  wire [6:0] s70;
  wire [3:0] s71;
  wire [15:0] R_t;
  wire R_v;
  wire [15:0] imm_t;
  wire immv_t;
  wire [2:0] aluop_t;
  wire [15:0] s72;
  wire [15:0] s73;
  vga_display vga_display_i0 (
    .clock( clock ),
    .res_H( 12'b1010000000 ),
    .fp_H( 12'b10000 ),
    .sync_H( 12'b1100000 ),
    .bp_H( 12'b110000 ),
    .neg_H( 1'b1 ),
    .res_V( 12'b111100000 ),
    .fp_V( 12'b1010 ),
    .sync_V( 12'b10 ),
    .bp_V( 12'b100010 ),
    .neg_V( 1'b1 ),
    .char( s0 ),
    .fg( s1 ),
    .bg( 12'b100010010 ),
    .TD( TD ),
    .MD( MD ),
    .R( R ),
    .G( G ),
    .B( B ),
    .hs( hs ),
    .vs( vs ),
    .de( de ),
    .CX( s2 ),
    .CY( s3 ),
    .vblank( vb ),
    .TA( TA ),
    .MA( MA )
  );
  debugcopy debugcopy_i1 (
    .db( db ),
    .clock( clock ),
    .e( vb ),
    .R0( R0_t ),
    .R1( R1_t ),
    .R2( R2_t ),
    .R3( R3_t ),
    .decode( s72 ),
    .ctrl( s73 ),
    .L( L_t ),
    .R( R_t ),
    .result( result_t ),
    .imm( imm_t ),
    .pc( PC_t )
  );
  // PC
  vga_labelnum vga_labelnum_i2 (
    .CX_i( s2 ),
    .CY_i( s3 ),
    .C_i( 7'b0 ),
    .fg_i( 4'b0 ),
    .fg_lab( 4'b1 ),
    .fg_num( 4'b100 ),
    .CX_c( 5'b1 ),
    .CY_c( 8'b1000 ),
    .en( 1'b1 ),
    .L_0( 7'b100000 ),
    .L_1( 7'b1010000 ),
    .L_2( 7'b1000011 ),
    .N( PC_t ),
    .CX_o( s4 ),
    .CY_o( s5 ),
    .C_o( s6 ),
    .fg_o( s7 )
  );
  ctrldec ctrldec_i3 (
    .ctrl( s73 ),
    .skip( skip_t ),
    .halt( halt_t ),
    .error( error_t ),
    .jump( jump_t ),
    .aluop( aluop_t ),
    .rdvalid( rdv_t ),
    .rsvalid( rsv_t ),
    .immv( immv_t )
  );
  decodedec decodedec_i4 (
    .D( s72 ),
    .op( op_t ),
    .cond( cond_t ),
    .rs( rs_t ),
    .rd( rd_t )
  );
  // R0
  vga_labelnum vga_labelnum_i5 (
    .CX_i( s4 ),
    .CY_i( s5 ),
    .C_i( s6 ),
    .fg_i( s7 ),
    .fg_lab( 4'b1 ),
    .fg_num( 4'b100 ),
    .CX_c( 5'b11 ),
    .CY_c( 8'b10 ),
    .en( 1'b1 ),
    .L_0( 7'b100000 ),
    .L_1( 7'b1010010 ),
    .L_2( 7'b110000 ),
    .N( R0_t ),
    .CX_o( s8 ),
    .CY_o( s9 ),
    .C_o( s10 ),
    .fg_o( s11 )
  );
  // R1
  vga_labelnum vga_labelnum_i6 (
    .CX_i( s8 ),
    .CY_i( s9 ),
    .C_i( s10 ),
    .fg_i( s11 ),
    .fg_lab( 4'b1 ),
    .fg_num( 4'b100 ),
    .CX_c( 5'b11 ),
    .CY_c( 8'b11 ),
    .en( 1'b1 ),
    .L_0( 7'b100000 ),
    .L_1( 7'b1010010 ),
    .L_2( 7'b110001 ),
    .N( R1_t ),
    .CX_o( s12 ),
    .CY_o( s13 ),
    .C_o( s14 ),
    .fg_o( s15 )
  );
  // R2
  vga_labelnum vga_labelnum_i7 (
    .CX_i( s12 ),
    .CY_i( s13 ),
    .C_i( s14 ),
    .fg_i( s15 ),
    .fg_lab( 4'b1 ),
    .fg_num( 4'b100 ),
    .CX_c( 5'b11 ),
    .CY_c( 8'b100 ),
    .en( 1'b1 ),
    .L_0( 7'b100000 ),
    .L_1( 7'b1010010 ),
    .L_2( 7'b110010 ),
    .N( R2_t ),
    .CX_o( s16 ),
    .CY_o( s17 ),
    .C_o( s18 ),
    .fg_o( s19 )
  );
  // R3
  vga_labelnum vga_labelnum_i8 (
    .CX_i( s16 ),
    .CY_i( s17 ),
    .C_i( s18 ),
    .fg_i( s19 ),
    .fg_lab( 4'b1 ),
    .fg_num( 4'b100 ),
    .CX_c( 5'b11 ),
    .CY_c( 8'b101 ),
    .en( 1'b1 ),
    .L_0( 7'b100000 ),
    .L_1( 7'b1010010 ),
    .L_2( 7'b110011 ),
    .N( R3_t ),
    .CX_o( s20 ),
    .CY_o( s21 ),
    .C_o( s22 ),
    .fg_o( s23 )
  );
  // rd
  vga_regdisp vga_regdisp_i9 (
    .CX_i( s20 ),
    .CY_i( s21 ),
    .C_i( s22 ),
    .fg_i( s23 ),
    .fg_c( 4'b10 ),
    .CX_c( 6'b101 ),
    .CY_c( 8'b1011 ),
    .en( rdv_t ),
    .R( rd_t ),
    .J( jump_t ),
    .sep( 7'b101100 ),
    .CX_o( s56 ),
    .CY_o( s57 ),
    .C_o( s58 ),
    .fg_o( s59 )
  );
  // rs
  vga_regdisp vga_regdisp_i10 (
    .CX_i( s56 ),
    .CY_i( s57 ),
    .C_i( s58 ),
    .fg_i( s59 ),
    .fg_c( 4'b10 ),
    .CX_c( 6'b110 ),
    .CY_c( 8'b1011 ),
    .en( rsv_t ),
    .R( rs_t ),
    .J( 1'b0 ),
    .sep( 7'b100000 ),
    .CX_o( s60 ),
    .CY_o( s61 ),
    .C_o( s62 ),
    .fg_o( s63 )
  );
  // aluop
  vga_aluopdisp vga_aluopdisp_i11 (
    .CX_i( s60 ),
    .CY_i( s61 ),
    .C_i( s62 ),
    .fg_i( s63 ),
    .fg_c( 4'b11 ),
    .CX_c( 6'b110 ),
    .CY_c( 8'b1100 ),
    .en( 1'b1 ),
    .aop( aluop_t ),
    .CX_o( s24 ),
    .CY_o( s25 ),
    .C_o( s26 ),
    .fg_o( s27 ),
    .L_v( L_v ),
    .R_v( R_v ),
    .res_v( res_v )
  );
  // L
  vga_labelnum vga_labelnum_i12 (
    .CX_i( s24 ),
    .CY_i( s25 ),
    .C_i( s26 ),
    .fg_i( s27 ),
    .fg_lab( 4'b10 ),
    .fg_num( 4'b100 ),
    .CX_c( 5'b10 ),
    .CY_c( 8'b1100 ),
    .en( L_v ),
    .L_0( 7'b100000 ),
    .L_1( 7'b111101 ),
    .L_2( 7'b100000 ),
    .N( L_t ),
    .CX_o( s28 ),
    .CY_o( s29 ),
    .C_o( s30 ),
    .fg_o( s31 )
  );
  // Op
  vga_opdisp vga_opdisp_i13 (
    .CX_i( s28 ),
    .CY_i( s29 ),
    .C_i( s30 ),
    .fg_i( s31 ),
    .fg_c( 4'b110 ),
    .CX_c( 5'b1 ),
    .CY_c( 8'b1011 ),
    .en( 1'b1 ),
    .op( op_t ),
    .cond( cond_t ),
    .CX_o( s32 ),
    .CY_o( s33 ),
    .C_o( s34 ),
    .fg_o( s35 )
  );
  // R
  vga_hex vga_hex_i14 (
    .CX_i( s32 ),
    .CY_i( s33 ),
    .C_i( s34 ),
    .fg_i( s35 ),
    .fg_c( 4'b100 ),
    .CX_c( 6'b111 ),
    .CY_c( 8'b1100 ),
    .N( R_t ),
    .en( R_v ),
    .CX_o( s64 ),
    .CY_o( s65 ),
    .C_o( s66 ),
    .fg_o( s67 )
  );
  // result
  vga_hex vga_hex_i15 (
    .CX_i( s64 ),
    .CY_i( s65 ),
    .C_i( s66 ),
    .fg_i( s67 ),
    .fg_c( 4'b100 ),
    .CX_c( 6'b11 ),
    .CY_c( 8'b1100 ),
    .N( result_t ),
    .en( res_v ),
    .CX_o( s36 ),
    .CY_o( s37 ),
    .C_o( s38 ),
    .fg_o( s39 )
  );
  // jump
  vga_string vga_string_i16 (
    .CX_i( s36 ),
    .CY_i( s37 ),
    .C_i( s38 ),
    .fg_i( s39 ),
    .fg_c( 4'b10 ),
    .CX_c( 6'b10 ),
    .CY_c( 8'b111 ),
    .C_0( 7'b1001010 ),
    .C_1( 7'b1010101 ),
    .C_2( 7'b1001101 ),
    .C_3( 7'b1010000 ),
    .en( jump_t ),
    .CX_o( s40 ),
    .CY_o( s41 ),
    .C_o( s42 ),
    .fg_o( s43 )
  );
  // skip
  vga_string vga_string_i17 (
    .CX_i( s40 ),
    .CY_i( s41 ),
    .C_i( s42 ),
    .fg_i( s43 ),
    .fg_c( 4'b11 ),
    .CX_c( 6'b11 ),
    .CY_c( 8'b111 ),
    .C_0( 7'b1010011 ),
    .C_1( 7'b1001011 ),
    .C_2( 7'b1001001 ),
    .C_3( 7'b1010000 ),
    .en( skip_t ),
    .CX_o( s44 ),
    .CY_o( s45 ),
    .C_o( s46 ),
    .fg_o( s47 )
  );
  // halt
  vga_string vga_string_i18 (
    .CX_i( s44 ),
    .CY_i( s45 ),
    .C_i( s46 ),
    .fg_i( s47 ),
    .fg_c( 4'b101 ),
    .CX_c( 6'b10 ),
    .CY_c( 8'b10 ),
    .C_0( 7'b1001000 ),
    .C_1( 7'b1000001 ),
    .C_2( 7'b1001100 ),
    .C_3( 7'b1010100 ),
    .en( halt_t ),
    .CX_o( s48 ),
    .CY_o( s49 ),
    .C_o( s50 ),
    .fg_o( s51 )
  );
  // error
  vga_string vga_string_i19 (
    .CX_i( s48 ),
    .CY_i( s49 ),
    .C_i( s50 ),
    .fg_i( s51 ),
    .fg_c( 4'b100 ),
    .CX_c( 6'b11 ),
    .CY_c( 8'b10 ),
    .C_0( 7'b1000101 ),
    .C_1( 7'b1010010 ),
    .C_2( 7'b1010010 ),
    .C_3( 7'b1000100 ),
    .en( error_t ),
    .CX_o( s52 ),
    .CY_o( s53 ),
    .C_o( s54 ),
    .fg_o( s55 )
  );
  // rd
  vga_regdisp vga_regdisp_i20 (
    .CX_i( s52 ),
    .CY_i( s53 ),
    .C_i( s54 ),
    .fg_i( s55 ),
    .fg_c( 4'b10 ),
    .CX_c( 6'b10 ),
    .CY_c( 8'b1100 ),
    .en( res_v ),
    .R( rd_t ),
    .J( jump_t ),
    .sep( 7'b111101 ),
    .CX_o( s68 ),
    .CY_o( s69 ),
    .C_o( s70 ),
    .fg_o( s71 )
  );
  // result
  vga_hex vga_hex_i21 (
    .CX_i( s68 ),
    .CY_i( s69 ),
    .C_i( s70 ),
    .fg_i( s71 ),
    .fg_c( 4'b100 ),
    .CX_c( 6'b111 ),
    .CY_c( 8'b1011 ),
    .N( imm_t ),
    .en( immv_t ),
    .C_o( s0 ),
    .fg_o( s1 )
  );
endmodule
