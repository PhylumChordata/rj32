// Code generated by "enumer -type=Opcode"; DO NOT EDIT.

package a32

import (
	"fmt"
	"strings"
)

const _OpcodeName = "NOPBRKHLTERRADDSUBADDCSUBBANDORXORSHLASRLSRLDSTLD8ST8LD16ST16BR_EBR_NEBR_U_LBR_U_LEBR_U_GEBR_U_GBR_S_LBR_S_LEBR_S_GEBR_S_GBRACALLRETCMPNEGNEGBNOTMOVSWPNumOps"

var _OpcodeIndex = [...]uint8{0, 3, 6, 9, 12, 15, 18, 22, 26, 29, 31, 34, 37, 40, 43, 45, 47, 50, 53, 57, 61, 65, 70, 76, 83, 90, 96, 102, 109, 116, 122, 125, 129, 132, 135, 138, 142, 145, 148, 151, 157}

const _OpcodeLowerName = "nopbrkhlterraddsubaddcsubbandorxorshlasrlsrldstld8st8ld16st16br_ebr_nebr_u_lbr_u_lebr_u_gebr_u_gbr_s_lbr_s_lebr_s_gebr_s_gbracallretcmpnegnegbnotmovswpnumops"

func (i Opcode) String() string {
	if i < 0 || i >= Opcode(len(_OpcodeIndex)-1) {
		return fmt.Sprintf("Opcode(%d)", i)
	}
	return _OpcodeName[_OpcodeIndex[i]:_OpcodeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpcodeNoOp() {
	var x [1]struct{}
	_ = x[NOP-(0)]
	_ = x[BRK-(1)]
	_ = x[HLT-(2)]
	_ = x[ERR-(3)]
	_ = x[ADD-(4)]
	_ = x[SUB-(5)]
	_ = x[ADDC-(6)]
	_ = x[SUBB-(7)]
	_ = x[AND-(8)]
	_ = x[OR-(9)]
	_ = x[XOR-(10)]
	_ = x[SHL-(11)]
	_ = x[ASR-(12)]
	_ = x[LSR-(13)]
	_ = x[LD-(14)]
	_ = x[ST-(15)]
	_ = x[LD8-(16)]
	_ = x[ST8-(17)]
	_ = x[LD16-(18)]
	_ = x[ST16-(19)]
	_ = x[BR_E-(20)]
	_ = x[BR_NE-(21)]
	_ = x[BR_U_L-(22)]
	_ = x[BR_U_LE-(23)]
	_ = x[BR_U_GE-(24)]
	_ = x[BR_U_G-(25)]
	_ = x[BR_S_L-(26)]
	_ = x[BR_S_LE-(27)]
	_ = x[BR_S_GE-(28)]
	_ = x[BR_S_G-(29)]
	_ = x[BRA-(30)]
	_ = x[CALL-(31)]
	_ = x[RET-(32)]
	_ = x[CMP-(33)]
	_ = x[NEG-(34)]
	_ = x[NEGB-(35)]
	_ = x[NOT-(36)]
	_ = x[MOV-(37)]
	_ = x[SWP-(38)]
	_ = x[NumOps-(39)]
}

var _OpcodeValues = []Opcode{NOP, BRK, HLT, ERR, ADD, SUB, ADDC, SUBB, AND, OR, XOR, SHL, ASR, LSR, LD, ST, LD8, ST8, LD16, ST16, BR_E, BR_NE, BR_U_L, BR_U_LE, BR_U_GE, BR_U_G, BR_S_L, BR_S_LE, BR_S_GE, BR_S_G, BRA, CALL, RET, CMP, NEG, NEGB, NOT, MOV, SWP, NumOps}

var _OpcodeNameToValueMap = map[string]Opcode{
	_OpcodeName[0:3]:          NOP,
	_OpcodeLowerName[0:3]:     NOP,
	_OpcodeName[3:6]:          BRK,
	_OpcodeLowerName[3:6]:     BRK,
	_OpcodeName[6:9]:          HLT,
	_OpcodeLowerName[6:9]:     HLT,
	_OpcodeName[9:12]:         ERR,
	_OpcodeLowerName[9:12]:    ERR,
	_OpcodeName[12:15]:        ADD,
	_OpcodeLowerName[12:15]:   ADD,
	_OpcodeName[15:18]:        SUB,
	_OpcodeLowerName[15:18]:   SUB,
	_OpcodeName[18:22]:        ADDC,
	_OpcodeLowerName[18:22]:   ADDC,
	_OpcodeName[22:26]:        SUBB,
	_OpcodeLowerName[22:26]:   SUBB,
	_OpcodeName[26:29]:        AND,
	_OpcodeLowerName[26:29]:   AND,
	_OpcodeName[29:31]:        OR,
	_OpcodeLowerName[29:31]:   OR,
	_OpcodeName[31:34]:        XOR,
	_OpcodeLowerName[31:34]:   XOR,
	_OpcodeName[34:37]:        SHL,
	_OpcodeLowerName[34:37]:   SHL,
	_OpcodeName[37:40]:        ASR,
	_OpcodeLowerName[37:40]:   ASR,
	_OpcodeName[40:43]:        LSR,
	_OpcodeLowerName[40:43]:   LSR,
	_OpcodeName[43:45]:        LD,
	_OpcodeLowerName[43:45]:   LD,
	_OpcodeName[45:47]:        ST,
	_OpcodeLowerName[45:47]:   ST,
	_OpcodeName[47:50]:        LD8,
	_OpcodeLowerName[47:50]:   LD8,
	_OpcodeName[50:53]:        ST8,
	_OpcodeLowerName[50:53]:   ST8,
	_OpcodeName[53:57]:        LD16,
	_OpcodeLowerName[53:57]:   LD16,
	_OpcodeName[57:61]:        ST16,
	_OpcodeLowerName[57:61]:   ST16,
	_OpcodeName[61:65]:        BR_E,
	_OpcodeLowerName[61:65]:   BR_E,
	_OpcodeName[65:70]:        BR_NE,
	_OpcodeLowerName[65:70]:   BR_NE,
	_OpcodeName[70:76]:        BR_U_L,
	_OpcodeLowerName[70:76]:   BR_U_L,
	_OpcodeName[76:83]:        BR_U_LE,
	_OpcodeLowerName[76:83]:   BR_U_LE,
	_OpcodeName[83:90]:        BR_U_GE,
	_OpcodeLowerName[83:90]:   BR_U_GE,
	_OpcodeName[90:96]:        BR_U_G,
	_OpcodeLowerName[90:96]:   BR_U_G,
	_OpcodeName[96:102]:       BR_S_L,
	_OpcodeLowerName[96:102]:  BR_S_L,
	_OpcodeName[102:109]:      BR_S_LE,
	_OpcodeLowerName[102:109]: BR_S_LE,
	_OpcodeName[109:116]:      BR_S_GE,
	_OpcodeLowerName[109:116]: BR_S_GE,
	_OpcodeName[116:122]:      BR_S_G,
	_OpcodeLowerName[116:122]: BR_S_G,
	_OpcodeName[122:125]:      BRA,
	_OpcodeLowerName[122:125]: BRA,
	_OpcodeName[125:129]:      CALL,
	_OpcodeLowerName[125:129]: CALL,
	_OpcodeName[129:132]:      RET,
	_OpcodeLowerName[129:132]: RET,
	_OpcodeName[132:135]:      CMP,
	_OpcodeLowerName[132:135]: CMP,
	_OpcodeName[135:138]:      NEG,
	_OpcodeLowerName[135:138]: NEG,
	_OpcodeName[138:142]:      NEGB,
	_OpcodeLowerName[138:142]: NEGB,
	_OpcodeName[142:145]:      NOT,
	_OpcodeLowerName[142:145]: NOT,
	_OpcodeName[145:148]:      MOV,
	_OpcodeLowerName[145:148]: MOV,
	_OpcodeName[148:151]:      SWP,
	_OpcodeLowerName[148:151]: SWP,
	_OpcodeName[151:157]:      NumOps,
	_OpcodeLowerName[151:157]: NumOps,
}

var _OpcodeNames = []string{
	_OpcodeName[0:3],
	_OpcodeName[3:6],
	_OpcodeName[6:9],
	_OpcodeName[9:12],
	_OpcodeName[12:15],
	_OpcodeName[15:18],
	_OpcodeName[18:22],
	_OpcodeName[22:26],
	_OpcodeName[26:29],
	_OpcodeName[29:31],
	_OpcodeName[31:34],
	_OpcodeName[34:37],
	_OpcodeName[37:40],
	_OpcodeName[40:43],
	_OpcodeName[43:45],
	_OpcodeName[45:47],
	_OpcodeName[47:50],
	_OpcodeName[50:53],
	_OpcodeName[53:57],
	_OpcodeName[57:61],
	_OpcodeName[61:65],
	_OpcodeName[65:70],
	_OpcodeName[70:76],
	_OpcodeName[76:83],
	_OpcodeName[83:90],
	_OpcodeName[90:96],
	_OpcodeName[96:102],
	_OpcodeName[102:109],
	_OpcodeName[109:116],
	_OpcodeName[116:122],
	_OpcodeName[122:125],
	_OpcodeName[125:129],
	_OpcodeName[129:132],
	_OpcodeName[132:135],
	_OpcodeName[135:138],
	_OpcodeName[138:142],
	_OpcodeName[142:145],
	_OpcodeName[145:148],
	_OpcodeName[148:151],
	_OpcodeName[151:157],
}

// OpcodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpcodeString(s string) (Opcode, error) {
	if val, ok := _OpcodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpcodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Opcode values", s)
}

// OpcodeValues returns all values of the enum
func OpcodeValues() []Opcode {
	return _OpcodeValues
}

// OpcodeStrings returns a slice of all String values of the enum
func OpcodeStrings() []string {
	strs := make([]string, len(_OpcodeNames))
	copy(strs, _OpcodeNames)
	return strs
}

// IsAOpcode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Opcode) IsAOpcode() bool {
	for _, v := range _OpcodeValues {
		if i == v {
			return true
		}
	}
	return false
}
