// Code generated by "enumer -type=Reg -transform lower"; DO NOT EDIT.

package a32

import (
	"fmt"
	"strings"
)

const _RegName = "zerorabpspa0a1a2a3a4a5a6a7t0t1t2t3t4t5t6t7t8t9s0s1s2s3s4s5s6s7s8s9"

var _RegIndex = [...]uint8{0, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66}

const _RegLowerName = "zerorabpspa0a1a2a3a4a5a6a7t0t1t2t3t4t5t6t7t8t9s0s1s2s3s4s5s6s7s8s9"

func (i Reg) String() string {
	if i >= Reg(len(_RegIndex)-1) {
		return fmt.Sprintf("Reg(%d)", i)
	}
	return _RegName[_RegIndex[i]:_RegIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RegNoOp() {
	var x [1]struct{}
	_ = x[Zero-(0)]
	_ = x[RA-(1)]
	_ = x[BP-(2)]
	_ = x[SP-(3)]
	_ = x[A0-(4)]
	_ = x[A1-(5)]
	_ = x[A2-(6)]
	_ = x[A3-(7)]
	_ = x[A4-(8)]
	_ = x[A5-(9)]
	_ = x[A6-(10)]
	_ = x[A7-(11)]
	_ = x[T0-(12)]
	_ = x[T1-(13)]
	_ = x[T2-(14)]
	_ = x[T3-(15)]
	_ = x[T4-(16)]
	_ = x[T5-(17)]
	_ = x[T6-(18)]
	_ = x[T7-(19)]
	_ = x[T8-(20)]
	_ = x[T9-(21)]
	_ = x[S0-(22)]
	_ = x[S1-(23)]
	_ = x[S2-(24)]
	_ = x[S3-(25)]
	_ = x[S4-(26)]
	_ = x[S5-(27)]
	_ = x[S6-(28)]
	_ = x[S7-(29)]
	_ = x[S8-(30)]
	_ = x[S9-(31)]
}

var _RegValues = []Reg{Zero, RA, BP, SP, A0, A1, A2, A3, A4, A5, A6, A7, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9}

var _RegNameToValueMap = map[string]Reg{
	_RegName[0:4]:        Zero,
	_RegLowerName[0:4]:   Zero,
	_RegName[4:6]:        RA,
	_RegLowerName[4:6]:   RA,
	_RegName[6:8]:        BP,
	_RegLowerName[6:8]:   BP,
	_RegName[8:10]:       SP,
	_RegLowerName[8:10]:  SP,
	_RegName[10:12]:      A0,
	_RegLowerName[10:12]: A0,
	_RegName[12:14]:      A1,
	_RegLowerName[12:14]: A1,
	_RegName[14:16]:      A2,
	_RegLowerName[14:16]: A2,
	_RegName[16:18]:      A3,
	_RegLowerName[16:18]: A3,
	_RegName[18:20]:      A4,
	_RegLowerName[18:20]: A4,
	_RegName[20:22]:      A5,
	_RegLowerName[20:22]: A5,
	_RegName[22:24]:      A6,
	_RegLowerName[22:24]: A6,
	_RegName[24:26]:      A7,
	_RegLowerName[24:26]: A7,
	_RegName[26:28]:      T0,
	_RegLowerName[26:28]: T0,
	_RegName[28:30]:      T1,
	_RegLowerName[28:30]: T1,
	_RegName[30:32]:      T2,
	_RegLowerName[30:32]: T2,
	_RegName[32:34]:      T3,
	_RegLowerName[32:34]: T3,
	_RegName[34:36]:      T4,
	_RegLowerName[34:36]: T4,
	_RegName[36:38]:      T5,
	_RegLowerName[36:38]: T5,
	_RegName[38:40]:      T6,
	_RegLowerName[38:40]: T6,
	_RegName[40:42]:      T7,
	_RegLowerName[40:42]: T7,
	_RegName[42:44]:      T8,
	_RegLowerName[42:44]: T8,
	_RegName[44:46]:      T9,
	_RegLowerName[44:46]: T9,
	_RegName[46:48]:      S0,
	_RegLowerName[46:48]: S0,
	_RegName[48:50]:      S1,
	_RegLowerName[48:50]: S1,
	_RegName[50:52]:      S2,
	_RegLowerName[50:52]: S2,
	_RegName[52:54]:      S3,
	_RegLowerName[52:54]: S3,
	_RegName[54:56]:      S4,
	_RegLowerName[54:56]: S4,
	_RegName[56:58]:      S5,
	_RegLowerName[56:58]: S5,
	_RegName[58:60]:      S6,
	_RegLowerName[58:60]: S6,
	_RegName[60:62]:      S7,
	_RegLowerName[60:62]: S7,
	_RegName[62:64]:      S8,
	_RegLowerName[62:64]: S8,
	_RegName[64:66]:      S9,
	_RegLowerName[64:66]: S9,
}

var _RegNames = []string{
	_RegName[0:4],
	_RegName[4:6],
	_RegName[6:8],
	_RegName[8:10],
	_RegName[10:12],
	_RegName[12:14],
	_RegName[14:16],
	_RegName[16:18],
	_RegName[18:20],
	_RegName[20:22],
	_RegName[22:24],
	_RegName[24:26],
	_RegName[26:28],
	_RegName[28:30],
	_RegName[30:32],
	_RegName[32:34],
	_RegName[34:36],
	_RegName[36:38],
	_RegName[38:40],
	_RegName[40:42],
	_RegName[42:44],
	_RegName[44:46],
	_RegName[46:48],
	_RegName[48:50],
	_RegName[50:52],
	_RegName[52:54],
	_RegName[54:56],
	_RegName[56:58],
	_RegName[58:60],
	_RegName[60:62],
	_RegName[62:64],
	_RegName[64:66],
}

// RegString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RegString(s string) (Reg, error) {
	if val, ok := _RegNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RegNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Reg values", s)
}

// RegValues returns all values of the enum
func RegValues() []Reg {
	return _RegValues
}

// RegStrings returns a slice of all String values of the enum
func RegStrings() []string {
	strs := make([]string, len(_RegNames))
	copy(strs, _RegNames)
	return strs
}

// IsAReg returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Reg) IsAReg() bool {
	for _, v := range _RegValues {
		if i == v {
			return true
		}
	}
	return false
}
