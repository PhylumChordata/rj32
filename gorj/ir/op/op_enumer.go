// Code generated by "enumer -type=Op -transform title-lower"; DO NOT EDIT.

package op

import (
	"fmt"
	"strings"
)

const _OpName = "invalidbuiltincallcallBuiltinchangeInterfacechangeTypeconstconvertcopyextractfieldfieldAddrfreeVarfuncglobalindexindexAddrlocallookupmakeInterfacemakeSlicenextnewparameterphiphiCopyrangeregslicesliceToArrayPointerstorestringShiftswapInswapOuttypeAssertaddsubmuldivremandorxorshiftLeftshiftRightandNotequalnotEquallesslessEqualgreatergreaterEqualnotnegateloadinvert"

var _OpIndex = [...]uint16{0, 7, 14, 18, 29, 44, 54, 59, 66, 70, 77, 82, 91, 98, 102, 108, 113, 122, 127, 133, 146, 155, 159, 162, 171, 174, 181, 186, 189, 194, 213, 218, 229, 235, 242, 252, 255, 258, 261, 264, 267, 270, 272, 275, 284, 294, 300, 305, 313, 317, 326, 333, 345, 348, 354, 358, 364}

const _OpLowerName = "invalidbuiltincallcallbuiltinchangeinterfacechangetypeconstconvertcopyextractfieldfieldaddrfreevarfuncglobalindexindexaddrlocallookupmakeinterfacemakeslicenextnewparameterphiphicopyrangeregsliceslicetoarraypointerstorestringshiftswapinswapouttypeassertaddsubmuldivremandorxorshiftleftshiftrightandnotequalnotequallesslessequalgreatergreaterequalnotnegateloadinvert"

func (i Op) String() string {
	if i < 0 || i >= Op(len(_OpIndex)-1) {
		return fmt.Sprintf("Op(%d)", i)
	}
	return _OpName[_OpIndex[i]:_OpIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[Builtin-(1)]
	_ = x[Call-(2)]
	_ = x[CallBuiltin-(3)]
	_ = x[ChangeInterface-(4)]
	_ = x[ChangeType-(5)]
	_ = x[Const-(6)]
	_ = x[Convert-(7)]
	_ = x[Copy-(8)]
	_ = x[Extract-(9)]
	_ = x[Field-(10)]
	_ = x[FieldAddr-(11)]
	_ = x[FreeVar-(12)]
	_ = x[Func-(13)]
	_ = x[Global-(14)]
	_ = x[Index-(15)]
	_ = x[IndexAddr-(16)]
	_ = x[Local-(17)]
	_ = x[Lookup-(18)]
	_ = x[MakeInterface-(19)]
	_ = x[MakeSlice-(20)]
	_ = x[Next-(21)]
	_ = x[New-(22)]
	_ = x[Parameter-(23)]
	_ = x[Phi-(24)]
	_ = x[PhiCopy-(25)]
	_ = x[Range-(26)]
	_ = x[Reg-(27)]
	_ = x[Slice-(28)]
	_ = x[SliceToArrayPointer-(29)]
	_ = x[Store-(30)]
	_ = x[StringShift-(31)]
	_ = x[SwapIn-(32)]
	_ = x[SwapOut-(33)]
	_ = x[TypeAssert-(34)]
	_ = x[Add-(35)]
	_ = x[Sub-(36)]
	_ = x[Mul-(37)]
	_ = x[Div-(38)]
	_ = x[Rem-(39)]
	_ = x[And-(40)]
	_ = x[Or-(41)]
	_ = x[Xor-(42)]
	_ = x[ShiftLeft-(43)]
	_ = x[ShiftRight-(44)]
	_ = x[AndNot-(45)]
	_ = x[Equal-(46)]
	_ = x[NotEqual-(47)]
	_ = x[Less-(48)]
	_ = x[LessEqual-(49)]
	_ = x[Greater-(50)]
	_ = x[GreaterEqual-(51)]
	_ = x[Not-(52)]
	_ = x[Negate-(53)]
	_ = x[Load-(54)]
	_ = x[Invert-(55)]
}

var _OpValues = []Op{Invalid, Builtin, Call, CallBuiltin, ChangeInterface, ChangeType, Const, Convert, Copy, Extract, Field, FieldAddr, FreeVar, Func, Global, Index, IndexAddr, Local, Lookup, MakeInterface, MakeSlice, Next, New, Parameter, Phi, PhiCopy, Range, Reg, Slice, SliceToArrayPointer, Store, StringShift, SwapIn, SwapOut, TypeAssert, Add, Sub, Mul, Div, Rem, And, Or, Xor, ShiftLeft, ShiftRight, AndNot, Equal, NotEqual, Less, LessEqual, Greater, GreaterEqual, Not, Negate, Load, Invert}

var _OpNameToValueMap = map[string]Op{
	_OpName[0:7]:          Invalid,
	_OpLowerName[0:7]:     Invalid,
	_OpName[7:14]:         Builtin,
	_OpLowerName[7:14]:    Builtin,
	_OpName[14:18]:        Call,
	_OpLowerName[14:18]:   Call,
	_OpName[18:29]:        CallBuiltin,
	_OpLowerName[18:29]:   CallBuiltin,
	_OpName[29:44]:        ChangeInterface,
	_OpLowerName[29:44]:   ChangeInterface,
	_OpName[44:54]:        ChangeType,
	_OpLowerName[44:54]:   ChangeType,
	_OpName[54:59]:        Const,
	_OpLowerName[54:59]:   Const,
	_OpName[59:66]:        Convert,
	_OpLowerName[59:66]:   Convert,
	_OpName[66:70]:        Copy,
	_OpLowerName[66:70]:   Copy,
	_OpName[70:77]:        Extract,
	_OpLowerName[70:77]:   Extract,
	_OpName[77:82]:        Field,
	_OpLowerName[77:82]:   Field,
	_OpName[82:91]:        FieldAddr,
	_OpLowerName[82:91]:   FieldAddr,
	_OpName[91:98]:        FreeVar,
	_OpLowerName[91:98]:   FreeVar,
	_OpName[98:102]:       Func,
	_OpLowerName[98:102]:  Func,
	_OpName[102:108]:      Global,
	_OpLowerName[102:108]: Global,
	_OpName[108:113]:      Index,
	_OpLowerName[108:113]: Index,
	_OpName[113:122]:      IndexAddr,
	_OpLowerName[113:122]: IndexAddr,
	_OpName[122:127]:      Local,
	_OpLowerName[122:127]: Local,
	_OpName[127:133]:      Lookup,
	_OpLowerName[127:133]: Lookup,
	_OpName[133:146]:      MakeInterface,
	_OpLowerName[133:146]: MakeInterface,
	_OpName[146:155]:      MakeSlice,
	_OpLowerName[146:155]: MakeSlice,
	_OpName[155:159]:      Next,
	_OpLowerName[155:159]: Next,
	_OpName[159:162]:      New,
	_OpLowerName[159:162]: New,
	_OpName[162:171]:      Parameter,
	_OpLowerName[162:171]: Parameter,
	_OpName[171:174]:      Phi,
	_OpLowerName[171:174]: Phi,
	_OpName[174:181]:      PhiCopy,
	_OpLowerName[174:181]: PhiCopy,
	_OpName[181:186]:      Range,
	_OpLowerName[181:186]: Range,
	_OpName[186:189]:      Reg,
	_OpLowerName[186:189]: Reg,
	_OpName[189:194]:      Slice,
	_OpLowerName[189:194]: Slice,
	_OpName[194:213]:      SliceToArrayPointer,
	_OpLowerName[194:213]: SliceToArrayPointer,
	_OpName[213:218]:      Store,
	_OpLowerName[213:218]: Store,
	_OpName[218:229]:      StringShift,
	_OpLowerName[218:229]: StringShift,
	_OpName[229:235]:      SwapIn,
	_OpLowerName[229:235]: SwapIn,
	_OpName[235:242]:      SwapOut,
	_OpLowerName[235:242]: SwapOut,
	_OpName[242:252]:      TypeAssert,
	_OpLowerName[242:252]: TypeAssert,
	_OpName[252:255]:      Add,
	_OpLowerName[252:255]: Add,
	_OpName[255:258]:      Sub,
	_OpLowerName[255:258]: Sub,
	_OpName[258:261]:      Mul,
	_OpLowerName[258:261]: Mul,
	_OpName[261:264]:      Div,
	_OpLowerName[261:264]: Div,
	_OpName[264:267]:      Rem,
	_OpLowerName[264:267]: Rem,
	_OpName[267:270]:      And,
	_OpLowerName[267:270]: And,
	_OpName[270:272]:      Or,
	_OpLowerName[270:272]: Or,
	_OpName[272:275]:      Xor,
	_OpLowerName[272:275]: Xor,
	_OpName[275:284]:      ShiftLeft,
	_OpLowerName[275:284]: ShiftLeft,
	_OpName[284:294]:      ShiftRight,
	_OpLowerName[284:294]: ShiftRight,
	_OpName[294:300]:      AndNot,
	_OpLowerName[294:300]: AndNot,
	_OpName[300:305]:      Equal,
	_OpLowerName[300:305]: Equal,
	_OpName[305:313]:      NotEqual,
	_OpLowerName[305:313]: NotEqual,
	_OpName[313:317]:      Less,
	_OpLowerName[313:317]: Less,
	_OpName[317:326]:      LessEqual,
	_OpLowerName[317:326]: LessEqual,
	_OpName[326:333]:      Greater,
	_OpLowerName[326:333]: Greater,
	_OpName[333:345]:      GreaterEqual,
	_OpLowerName[333:345]: GreaterEqual,
	_OpName[345:348]:      Not,
	_OpLowerName[345:348]: Not,
	_OpName[348:354]:      Negate,
	_OpLowerName[348:354]: Negate,
	_OpName[354:358]:      Load,
	_OpLowerName[354:358]: Load,
	_OpName[358:364]:      Invert,
	_OpLowerName[358:364]: Invert,
}

var _OpNames = []string{
	_OpName[0:7],
	_OpName[7:14],
	_OpName[14:18],
	_OpName[18:29],
	_OpName[29:44],
	_OpName[44:54],
	_OpName[54:59],
	_OpName[59:66],
	_OpName[66:70],
	_OpName[70:77],
	_OpName[77:82],
	_OpName[82:91],
	_OpName[91:98],
	_OpName[98:102],
	_OpName[102:108],
	_OpName[108:113],
	_OpName[113:122],
	_OpName[122:127],
	_OpName[127:133],
	_OpName[133:146],
	_OpName[146:155],
	_OpName[155:159],
	_OpName[159:162],
	_OpName[162:171],
	_OpName[171:174],
	_OpName[174:181],
	_OpName[181:186],
	_OpName[186:189],
	_OpName[189:194],
	_OpName[194:213],
	_OpName[213:218],
	_OpName[218:229],
	_OpName[229:235],
	_OpName[235:242],
	_OpName[242:252],
	_OpName[252:255],
	_OpName[255:258],
	_OpName[258:261],
	_OpName[261:264],
	_OpName[264:267],
	_OpName[267:270],
	_OpName[270:272],
	_OpName[272:275],
	_OpName[275:284],
	_OpName[284:294],
	_OpName[294:300],
	_OpName[300:305],
	_OpName[305:313],
	_OpName[313:317],
	_OpName[317:326],
	_OpName[326:333],
	_OpName[333:345],
	_OpName[345:348],
	_OpName[348:354],
	_OpName[354:358],
	_OpName[358:364],
}

// OpString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpString(s string) (Op, error) {
	if val, ok := _OpNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Op values", s)
}

// OpValues returns all values of the enum
func OpValues() []Op {
	return _OpValues
}

// OpStrings returns a slice of all String values of the enum
func OpStrings() []string {
	strs := make([]string, len(_OpNames))
	copy(strs, _OpNames)
	return strs
}

// IsAOp returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Op) IsAOp() bool {
	for _, v := range _OpValues {
		if i == v {
			return true
		}
	}
	return false
}
