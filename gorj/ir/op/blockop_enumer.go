// Code generated by "enumer -type=BlockOp -transform title-lower"; DO NOT EDIT.

package op

import (
	"fmt"
	"strings"
)

const _BlockOpName = "badBlockjumpifreturnifEqualifNotEqualifLessifLessEqualifGreaterifGreaterEqual"

var _BlockOpIndex = [...]uint8{0, 8, 12, 14, 20, 27, 37, 43, 54, 63, 77}

const _BlockOpLowerName = "badblockjumpifreturnifequalifnotequaliflessiflessequalifgreaterifgreaterequal"

func (i BlockOp) String() string {
	if i < 0 || i >= BlockOp(len(_BlockOpIndex)-1) {
		return fmt.Sprintf("BlockOp(%d)", i)
	}
	return _BlockOpName[_BlockOpIndex[i]:_BlockOpIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BlockOpNoOp() {
	var x [1]struct{}
	_ = x[BadBlock-(0)]
	_ = x[Jump-(1)]
	_ = x[If-(2)]
	_ = x[Return-(3)]
	_ = x[IfEqual-(4)]
	_ = x[IfNotEqual-(5)]
	_ = x[IfLess-(6)]
	_ = x[IfLessEqual-(7)]
	_ = x[IfGreater-(8)]
	_ = x[IfGreaterEqual-(9)]
}

var _BlockOpValues = []BlockOp{BadBlock, Jump, If, Return, IfEqual, IfNotEqual, IfLess, IfLessEqual, IfGreater, IfGreaterEqual}

var _BlockOpNameToValueMap = map[string]BlockOp{
	_BlockOpName[0:8]:        BadBlock,
	_BlockOpLowerName[0:8]:   BadBlock,
	_BlockOpName[8:12]:       Jump,
	_BlockOpLowerName[8:12]:  Jump,
	_BlockOpName[12:14]:      If,
	_BlockOpLowerName[12:14]: If,
	_BlockOpName[14:20]:      Return,
	_BlockOpLowerName[14:20]: Return,
	_BlockOpName[20:27]:      IfEqual,
	_BlockOpLowerName[20:27]: IfEqual,
	_BlockOpName[27:37]:      IfNotEqual,
	_BlockOpLowerName[27:37]: IfNotEqual,
	_BlockOpName[37:43]:      IfLess,
	_BlockOpLowerName[37:43]: IfLess,
	_BlockOpName[43:54]:      IfLessEqual,
	_BlockOpLowerName[43:54]: IfLessEqual,
	_BlockOpName[54:63]:      IfGreater,
	_BlockOpLowerName[54:63]: IfGreater,
	_BlockOpName[63:77]:      IfGreaterEqual,
	_BlockOpLowerName[63:77]: IfGreaterEqual,
}

var _BlockOpNames = []string{
	_BlockOpName[0:8],
	_BlockOpName[8:12],
	_BlockOpName[12:14],
	_BlockOpName[14:20],
	_BlockOpName[20:27],
	_BlockOpName[27:37],
	_BlockOpName[37:43],
	_BlockOpName[43:54],
	_BlockOpName[54:63],
	_BlockOpName[63:77],
}

// BlockOpString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BlockOpString(s string) (BlockOp, error) {
	if val, ok := _BlockOpNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BlockOpNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BlockOp values", s)
}

// BlockOpValues returns all values of the enum
func BlockOpValues() []BlockOp {
	return _BlockOpValues
}

// BlockOpStrings returns a slice of all String values of the enum
func BlockOpStrings() []string {
	strs := make([]string, len(_BlockOpNames))
	copy(strs, _BlockOpNames)
	return strs
}

// IsABlockOp returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BlockOp) IsABlockOp() bool {
	for _, v := range _BlockOpValues {
		if i == v {
			return true
		}
	}
	return false
}
