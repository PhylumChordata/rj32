// Code generated by "enumer -type=BlockOp -transform title-lower -json -text"; DO NOT EDIT.

package op

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _BlockOpName = "badBlockjumpifreturn"

var _BlockOpIndex = [...]uint8{0, 8, 12, 14, 20}

const _BlockOpLowerName = "badblockjumpifreturn"

func (i BlockOp) String() string {
	if i < 0 || i >= BlockOp(len(_BlockOpIndex)-1) {
		return fmt.Sprintf("BlockOp(%d)", i)
	}
	return _BlockOpName[_BlockOpIndex[i]:_BlockOpIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BlockOpNoOp() {
	var x [1]struct{}
	_ = x[BadBlock-(0)]
	_ = x[Jump-(1)]
	_ = x[If-(2)]
	_ = x[Return-(3)]
}

var _BlockOpValues = []BlockOp{BadBlock, Jump, If, Return}

var _BlockOpNameToValueMap = map[string]BlockOp{
	_BlockOpName[0:8]:        BadBlock,
	_BlockOpLowerName[0:8]:   BadBlock,
	_BlockOpName[8:12]:       Jump,
	_BlockOpLowerName[8:12]:  Jump,
	_BlockOpName[12:14]:      If,
	_BlockOpLowerName[12:14]: If,
	_BlockOpName[14:20]:      Return,
	_BlockOpLowerName[14:20]: Return,
}

var _BlockOpNames = []string{
	_BlockOpName[0:8],
	_BlockOpName[8:12],
	_BlockOpName[12:14],
	_BlockOpName[14:20],
}

// BlockOpString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BlockOpString(s string) (BlockOp, error) {
	if val, ok := _BlockOpNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BlockOpNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BlockOp values", s)
}

// BlockOpValues returns all values of the enum
func BlockOpValues() []BlockOp {
	return _BlockOpValues
}

// BlockOpStrings returns a slice of all String values of the enum
func BlockOpStrings() []string {
	strs := make([]string, len(_BlockOpNames))
	copy(strs, _BlockOpNames)
	return strs
}

// IsABlockOp returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BlockOp) IsABlockOp() bool {
	for _, v := range _BlockOpValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for BlockOp
func (i BlockOp) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for BlockOp
func (i *BlockOp) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BlockOp should be a string, got %s", data)
	}

	var err error
	*i, err = BlockOpString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for BlockOp
func (i BlockOp) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for BlockOp
func (i *BlockOp) UnmarshalText(text []byte) error {
	var err error
	*i, err = BlockOpString(string(text))
	return err
}
