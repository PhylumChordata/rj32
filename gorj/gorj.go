// Copyright (c) 2021 rj45 (github.com/rj45), MIT Licensed, see LICENSE.

package main

import (
	"bytes"
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/rj45/rj32/gorj/codegen"
	"github.com/rj45/rj32/gorj/html"
	"github.com/rj45/rj32/gorj/parser"
	"github.com/rj45/rj32/gorj/regalloc"
	"github.com/rj45/rj32/gorj/xform"
)

type dumper interface {
	WritePhase(string, string)
	WriteAsm(string, *bytes.Buffer)
	Close()
}

type nopDumper struct{}

func (nopDumper) WritePhase(string, string)      {}
func (nopDumper) WriteAsm(string, *bytes.Buffer) {}
func (nopDumper) Close()                         {}

func main() {
	dump := flag.String("dump", "", "Dump a function to ssa.html")
	output := flag.String("o", "", "output assembly file")

	flag.Parse()

	filename := flag.Arg(0)

	dir := filepath.Dir(filename)
	basename := filepath.Base(filename)
	outname := strings.TrimSuffix(basename, filepath.Ext(basename)) + ".asm"
	if *output != "" {
		outname = *output
	}

	var out io.Writer
	if outname == "-" {
		out = os.Stdout
	} else {
		f, err := os.Create(outname)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Fprintln(f, "; Code generated by gorj; DO NOT EDIT.")
		out = f
	}

	log.SetFlags(log.Lshortfile)

	mod := parser.ParseModule(dir, basename)

	gen := codegen.NewGenerator(mod)

	fmt.Println(mod.LongString())

	for _, fn := range mod.Funcs {
		var w dumper
		w = nopDumper{}
		if *dump != "" && strings.Contains(fn.Name, *dump) {
			w = html.NewHTMLWriter("ssa.html", fn)
		}
		defer w.Close()

		w.WritePhase("initial", "initial")

		xform.Transform(xform.Elaboration, fn)
		w.WritePhase("elaboration", "elaboration")

		xform.Transform(xform.Simplification, fn)
		w.WritePhase("simplification", "simplification")

		xform.Transform(xform.Lowering, fn)
		w.WritePhase("lowering", "lowering")

		used := regalloc.Allocate(fn)
		w.WritePhase("allocation", "allocation")

		xform.Transform(xform.Legalize, fn)
		w.WritePhase("legalize", "legalize")

		xform.Transform(xform.CleanUp, fn)
		w.WritePhase("cleanup", "cleanup")

		xform.ProEpiLogue(used, fn)
		xform.EliminateEmptyBlocks(fn)
		w.WritePhase("final", "final")

		buf := &bytes.Buffer{}
		gen.Func(fn, io.MultiWriter(out, buf))
		w.WriteAsm("asm", buf)
	}

}
